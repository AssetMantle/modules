// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: persistence_sdk/modules/maintainers/internal/mappable/maintainer.proto

package mappable

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/persistenceOne/persistenceSDK/schema/traits/base"
	github_com_persistenceOne_persistenceSDK_schema_types "github.com/persistenceOne/persistenceSDK/schema/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Maintainer struct {
	ID                   github_com_persistenceOne_persistenceSDK_schema_types.ID         `protobuf:"bytes,1,opt,name=i_d,json=iD,proto3,customtype=github.com/persistenceOne/persistenceSDK/schema/types.ID" json:"i_d"`
	MaintainedProperties github_com_persistenceOne_persistenceSDK_schema_types.Properties `protobuf:"bytes,2,opt,name=maintained_properties,json=maintainedProperties,proto3,customtype=github.com/persistenceOne/persistenceSDK/schema/types.Properties" json:"maintained_properties"`
	AddMaintainer        bool                                                             `protobuf:"varint,3,opt,name=add_maintainer,json=addMaintainer,proto3" json:"add_maintainer,omitempty"`
	RemoveMaintainer     bool                                                             `protobuf:"varint,4,opt,name=remove_maintainer,json=removeMaintainer,proto3" json:"remove_maintainer,omitempty"`
	MutateMaintainer     bool                                                             `protobuf:"varint,5,opt,name=mutate_maintainer,json=mutateMaintainer,proto3" json:"mutate_maintainer,omitempty"`
}

func (m *Maintainer) Reset()         { *m = Maintainer{} }
func (m *Maintainer) String() string { return proto.CompactTextString(m) }
func (*Maintainer) ProtoMessage()    {}
func (*Maintainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_162e2aebee016dce, []int{0}
}
func (m *Maintainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Maintainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Maintainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Maintainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Maintainer.Merge(m, src)
}
func (m *Maintainer) XXX_Size() int {
	return m.Size()
}
func (m *Maintainer) XXX_DiscardUnknown() {
	xxx_messageInfo_Maintainer.DiscardUnknown(m)
}

var xxx_messageInfo_Maintainer proto.InternalMessageInfo

func (m *Maintainer) GetAddMaintainer() bool {
	if m != nil {
		return m.AddMaintainer
	}
	return false
}

func (m *Maintainer) GetRemoveMaintainer() bool {
	if m != nil {
		return m.RemoveMaintainer
	}
	return false
}

func (m *Maintainer) GetMutateMaintainer() bool {
	if m != nil {
		return m.MutateMaintainer
	}
	return false
}

func init() {
	proto.RegisterType((*Maintainer)(nil), "persistence_sdk.modules.maintainers.internal.mappable.Maintainer")
}

func init() {
	proto.RegisterFile("persistence_sdk/modules/maintainers/internal/mappable/maintainer.proto", fileDescriptor_162e2aebee016dce)
}

var fileDescriptor_162e2aebee016dce = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4d, 0x4b, 0x02, 0x41,
	0x18, 0xc7, 0x77, 0xb5, 0xa2, 0x16, 0x8a, 0x5a, 0x0c, 0xc4, 0xc3, 0x2a, 0x41, 0x20, 0x04, 0x33,
	0x87, 0x5e, 0xe8, 0x28, 0x22, 0x91, 0x84, 0xbd, 0xd8, 0xad, 0xcb, 0x32, 0xeb, 0x3c, 0xb8, 0x43,
	0xce, 0xce, 0x30, 0x33, 0x06, 0x1d, 0xfa, 0x0e, 0x7d, 0x2c, 0x8f, 0x1e, 0xa3, 0x83, 0x85, 0x7e,
	0x91, 0x70, 0x57, 0x77, 0x57, 0x4f, 0xd2, 0x6d, 0x66, 0x9e, 0xff, 0xf3, 0xfb, 0x3f, 0x2f, 0xe3,
	0xdc, 0x48, 0x50, 0x9a, 0x69, 0x03, 0x51, 0x0f, 0x7c, 0x4d, 0x5f, 0x31, 0x17, 0x74, 0x38, 0x00,
	0x8d, 0x39, 0x61, 0x91, 0x21, 0x2c, 0x02, 0xa5, 0x31, 0x8b, 0x0c, 0xa8, 0x88, 0x0c, 0x30, 0x27,
	0x52, 0x92, 0x60, 0x00, 0xb9, 0x28, 0x92, 0x4a, 0x18, 0xe1, 0x5e, 0xae, 0x71, 0xd0, 0x82, 0x83,
	0x72, 0x1c, 0xb4, 0xe4, 0xa0, 0x25, 0xa7, 0x52, 0xea, 0x8b, 0xbe, 0x88, 0x09, 0x78, 0x7e, 0x4a,
	0x60, 0x95, 0xab, 0xf5, 0xa2, 0x74, 0x2f, 0x04, 0x4e, 0xb0, 0x51, 0x84, 0x19, 0x8d, 0x03, 0xa2,
	0x01, 0x87, 0x44, 0xb7, 0x39, 0x1f, 0x9a, 0x39, 0x46, 0x2f, 0xf2, 0x2e, 0x36, 0xcb, 0xeb, 0xac,
	0x64, 0x9d, 0xfc, 0x14, 0x1c, 0xa7, 0x93, 0x56, 0xe9, 0x3e, 0x39, 0x45, 0xe6, 0xd3, 0xb2, 0x5d,
	0xb3, 0xeb, 0x7b, 0xcd, 0xc6, 0x68, 0x52, 0xb5, 0xbe, 0x27, 0xd5, 0xeb, 0x3e, 0x33, 0xe1, 0x30,
	0x40, 0x3d, 0xc1, 0x71, 0xce, 0xe4, 0x21, 0x82, 0xfc, 0xf5, 0xb9, 0x75, 0x97, 0x5a, 0xbe, 0x4b,
	0xd0, 0xa8, 0xdd, 0xea, 0x16, 0x58, 0xcb, 0xfd, 0x70, 0x8e, 0xd3, 0x31, 0x50, 0x5f, 0x2a, 0x21,
	0x41, 0x19, 0x06, 0xba, 0x5c, 0x88, 0x4d, 0x6e, 0x17, 0x26, 0x8d, 0xff, 0x99, 0x3c, 0xa6, 0xbc,
	0x6e, 0x29, 0xb3, 0xc9, 0x5e, 0xdd, 0x53, 0xe7, 0x80, 0x50, 0xea, 0x67, 0x9b, 0x28, 0x17, 0x6b,
	0x76, 0x7d, 0xb7, 0xbb, 0x4f, 0x28, 0xcd, 0x35, 0x7e, 0xe6, 0x1c, 0x29, 0xe0, 0xe2, 0x0d, 0xf2,
	0xca, 0xad, 0x58, 0x79, 0x98, 0x04, 0x56, 0xc5, 0xf3, 0xe1, 0x9b, 0x15, 0xf1, 0x76, 0x22, 0x4e,
	0x02, 0x99, 0xb8, 0x19, 0x8e, 0xa6, 0x9e, 0x3d, 0x9e, 0x7a, 0xf6, 0xef, 0xd4, 0xb3, 0x3f, 0x67,
	0x9e, 0x35, 0x9e, 0x79, 0xd6, 0xd7, 0xcc, 0xb3, 0x5e, 0xee, 0x37, 0x6e, 0x79, 0xa3, 0x7f, 0x19,
	0xec, 0xc4, 0x2b, 0x3d, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xe1, 0xd3, 0xf9, 0xd7, 0x02,
	0x00, 0x00,
}

func (m *Maintainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Maintainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Maintainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MutateMaintainer {
		i--
		if m.MutateMaintainer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.RemoveMaintainer {
		i--
		if m.RemoveMaintainer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AddMaintainer {
		i--
		if m.AddMaintainer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.MaintainedProperties.Size()
		i -= size
		if _, err := m.MaintainedProperties.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMaintainer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMaintainer(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMaintainer(dAtA []byte, offset int, v uint64) int {
	offset -= sovMaintainer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Maintainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovMaintainer(uint64(l))
	l = m.MaintainedProperties.Size()
	n += 1 + l + sovMaintainer(uint64(l))
	if m.AddMaintainer {
		n += 2
	}
	if m.RemoveMaintainer {
		n += 2
	}
	if m.MutateMaintainer {
		n += 2
	}
	return n
}

func sovMaintainer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMaintainer(x uint64) (n int) {
	return sovMaintainer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Maintainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaintainer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Maintainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Maintainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaintainer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaintainer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaintainer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintainedProperties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaintainer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaintainer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaintainer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaintainedProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMaintainer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaintainer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddMaintainer = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveMaintainer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaintainer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemoveMaintainer = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutateMaintainer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaintainer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MutateMaintainer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMaintainer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaintainer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMaintainer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMaintainer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaintainer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaintainer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMaintainer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMaintainer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMaintainer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMaintainer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMaintainer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMaintainer = fmt.Errorf("proto: unexpected end of group")
)
