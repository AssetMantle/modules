// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: persistenceSDK/modules/metas/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryMetaRequest struct {
	MetaID string `protobuf:"bytes,1,opt,name=metaID,proto3" json:"metaID,omitempty" valid:"required~required MetaID missing"`
}

func (m *QueryMetaRequest) Reset()         { *m = QueryMetaRequest{} }
func (m *QueryMetaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMetaRequest) ProtoMessage()    {}
func (*QueryMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0125612da399bbe9, []int{0}
}
func (m *QueryMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetaRequest.Merge(m, src)
}
func (m *QueryMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetaRequest proto.InternalMessageInfo

type QueryMetaResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Value   Meta   `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
}

func (m *QueryMetaResponse) Reset()         { *m = QueryMetaResponse{} }
func (m *QueryMetaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMetaResponse) ProtoMessage()    {}
func (*QueryMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0125612da399bbe9, []int{1}
}
func (m *QueryMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetaResponse.Merge(m, src)
}
func (m *QueryMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetaResponse proto.InternalMessageInfo

func (m *QueryMetaResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *QueryMetaResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *QueryMetaResponse) GetValue() Meta {
	if m != nil {
		return m.Value
	}
	return Meta{}
}

type QueryParametersRequest struct {
}

func (m *QueryParametersRequest) Reset()         { *m = QueryParametersRequest{} }
func (m *QueryParametersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParametersRequest) ProtoMessage()    {}
func (*QueryParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0125612da399bbe9, []int{2}
}
func (m *QueryParametersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParametersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParametersRequest.Merge(m, src)
}
func (m *QueryParametersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParametersRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParametersResponse struct {
	Success    bool       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error      string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Parameters Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters"`
}

func (m *QueryParametersResponse) Reset()         { *m = QueryParametersResponse{} }
func (m *QueryParametersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParametersResponse) ProtoMessage()    {}
func (*QueryParametersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0125612da399bbe9, []int{3}
}
func (m *QueryParametersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParametersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParametersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParametersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParametersResponse.Merge(m, src)
}
func (m *QueryParametersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParametersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParametersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParametersResponse proto.InternalMessageInfo

func (m *QueryParametersResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *QueryParametersResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *QueryParametersResponse) GetParameters() Parameters {
	if m != nil {
		return m.Parameters
	}
	return Parameters{}
}

func init() {
	proto.RegisterType((*QueryMetaRequest)(nil), "persistenceSDK.modules.metas.QueryMetaRequest")
	proto.RegisterType((*QueryMetaResponse)(nil), "persistenceSDK.modules.metas.QueryMetaResponse")
	proto.RegisterType((*QueryParametersRequest)(nil), "persistenceSDK.modules.metas.QueryParametersRequest")
	proto.RegisterType((*QueryParametersResponse)(nil), "persistenceSDK.modules.metas.QueryParametersResponse")
}

func init() {
	proto.RegisterFile("persistenceSDK/modules/metas/query.proto", fileDescriptor_0125612da399bbe9)
}

var fileDescriptor_0125612da399bbe9 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x77, 0xa2, 0x69, 0xeb, 0x88, 0xa0, 0x43, 0xd1, 0x25, 0x94, 0x4d, 0x58, 0x51, 0x17,
	0x2c, 0x3b, 0x58, 0xf5, 0x52, 0xc4, 0x43, 0x08, 0x14, 0x91, 0xfa, 0x63, 0x05, 0x0f, 0xde, 0x26,
	0xc9, 0x63, 0x5d, 0xc8, 0xee, 0x6c, 0xe6, 0xcd, 0x06, 0x8a, 0xe8, 0x41, 0x2f, 0x1e, 0x05, 0x4f,
	0x7a, 0xea, 0xd5, 0xff, 0xa4, 0xc7, 0x80, 0x17, 0x4f, 0x45, 0x12, 0x0f, 0x9e, 0xfd, 0x0b, 0x64,
	0x77, 0x27, 0x66, 0x6d, 0x71, 0xa9, 0xbd, 0x0c, 0x33, 0xcc, 0xf7, 0xbd, 0xef, 0xe7, 0xbd, 0x37,
	0x43, 0xbd, 0x14, 0x14, 0x46, 0xa8, 0x21, 0x19, 0xc0, 0xb3, 0xde, 0x43, 0x1e, 0xcb, 0x61, 0x36,
	0x02, 0xe4, 0x31, 0x68, 0x81, 0x7c, 0x9c, 0x81, 0xda, 0xf3, 0x53, 0x25, 0xb5, 0x64, 0x1b, 0x7f,
	0x2b, 0x7d, 0xa3, 0xf4, 0x0b, 0x65, 0x6b, 0x3d, 0x94, 0xa1, 0x2c, 0x84, 0x3c, 0xdf, 0x95, 0x31,
	0xad, 0x8d, 0x50, 0xca, 0x70, 0x04, 0x5c, 0xa4, 0x11, 0x17, 0x49, 0x22, 0xb5, 0xd0, 0x91, 0x4c,
	0xd0, 0xdc, 0xde, 0xa8, 0xf5, 0xce, 0x57, 0x23, 0xdc, 0xac, 0x15, 0xa6, 0x42, 0x89, 0x18, 0x34,
	0xa8, 0x52, 0xed, 0xf6, 0xe9, 0xc5, 0xa7, 0x39, 0xf7, 0x2e, 0x68, 0x11, 0xc0, 0x38, 0x03, 0xd4,
	0xac, 0x47, 0x57, 0x72, 0xf1, 0x83, 0x9e, 0x4d, 0x3a, 0xc4, 0x3b, 0xd7, 0xdd, 0xfc, 0x75, 0xd8,
	0xf6, 0x26, 0x62, 0x14, 0x0d, 0xb7, 0x5d, 0x05, 0xe3, 0x2c, 0x52, 0x30, 0x7c, 0xb3, 0xd8, 0x74,
	0x76, 0x0b, 0x69, 0x27, 0x8e, 0x10, 0xa3, 0x24, 0x74, 0x03, 0x13, 0xbb, 0xbd, 0xf6, 0x7e, 0xbf,
	0x6d, 0xfd, 0xdc, 0x6f, 0x5b, 0xee, 0x3b, 0x42, 0x2f, 0x55, 0x4c, 0x30, 0x95, 0x09, 0x02, 0xb3,
	0xe9, 0x2a, 0x66, 0x83, 0x01, 0x20, 0x16, 0x36, 0x6b, 0xc1, 0xe2, 0xc8, 0xd6, 0x69, 0x13, 0x94,
	0x92, 0xca, 0x6e, 0xe4, 0xf6, 0x41, 0x79, 0x60, 0xf7, 0x69, 0x73, 0x22, 0x46, 0x19, 0xd8, 0x67,
	0x3a, 0xc4, 0x3b, 0xbf, 0xe5, 0xfa, 0x75, 0x2d, 0xf6, 0x73, 0xab, 0xee, 0xd9, 0x83, 0xc3, 0xb6,
	0x15, 0x94, 0x61, 0xae, 0x4d, 0x2f, 0x17, 0x10, 0x4f, 0x16, 0x1d, 0x40, 0x53, 0xaf, 0xfb, 0x89,
	0xd0, 0x2b, 0xc7, 0xae, 0x4e, 0x49, 0xf9, 0x88, 0xd2, 0x3f, 0x2d, 0x46, 0x83, 0xea, 0xd5, 0xa3,
	0x2e, 0x5d, 0x0d, 0x70, 0x25, 0xc3, 0xd6, 0xb4, 0x41, 0x9b, 0x05, 0x1b, 0xfb, 0x4c, 0xe8, 0xea,
	0x0e, 0xe8, 0xbc, 0x30, 0xe6, 0xd7, 0x67, 0x3c, 0x3a, 0xd1, 0x16, 0x3f, 0xb1, 0xbe, 0x2c, 0xdb,
	0xf5, 0xdf, 0x7e, 0xfd, 0xf1, 0xb1, 0xe1, 0xb1, 0xeb, 0xfc, 0xc8, 0x6b, 0x9a, 0xdc, 0xaa, 0xbc,
	0x38, 0xfe, 0xaa, 0x9c, 0xf5, 0x6b, 0xf6, 0x85, 0xd0, 0x0b, 0x3b, 0xa0, 0x97, 0xa5, 0xb0, 0x3b,
	0x27, 0xb0, 0x3c, 0x36, 0x8a, 0xd6, 0xdd, 0xff, 0x8c, 0x32, 0xb8, 0x37, 0x0b, 0xdc, 0x6b, 0xec,
	0xea, 0x3f, 0x71, 0x97, 0x2d, 0xed, 0x3e, 0x3f, 0x98, 0x39, 0x64, 0x3a, 0x73, 0xc8, 0xf7, 0x99,
	0x43, 0x3e, 0xcc, 0x1d, 0x6b, 0x3a, 0x77, 0xac, 0x6f, 0x73, 0xc7, 0x7a, 0x71, 0x2f, 0x8c, 0xf4,
	0xcb, 0xac, 0xef, 0x0f, 0x64, 0x5c, 0x4d, 0xf4, 0x38, 0x01, 0x5e, 0xfb, 0xa9, 0xf4, 0x5e, 0x0a,
	0xd8, 0x5f, 0x29, 0x7e, 0xd4, 0xed, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xd6, 0xc7, 0xea,
	0x26, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetMeta(ctx context.Context, in *QueryMetaRequest, opts ...grpc.CallOption) (*QueryMetaResponse, error)
	GetParameters(ctx context.Context, in *QueryParametersRequest, opts ...grpc.CallOption) (*QueryParametersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetMeta(ctx context.Context, in *QueryMetaRequest, opts ...grpc.CallOption) (*QueryMetaResponse, error) {
	out := new(QueryMetaResponse)
	err := c.cc.Invoke(ctx, "/persistenceSDK.modules.metas.Query/GetMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetParameters(ctx context.Context, in *QueryParametersRequest, opts ...grpc.CallOption) (*QueryParametersResponse, error) {
	out := new(QueryParametersResponse)
	err := c.cc.Invoke(ctx, "/persistenceSDK.modules.metas.Query/GetParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetMeta(context.Context, *QueryMetaRequest) (*QueryMetaResponse, error)
	GetParameters(context.Context, *QueryParametersRequest) (*QueryParametersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetMeta(ctx context.Context, req *QueryMetaRequest) (*QueryMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeta not implemented")
}
func (*UnimplementedQueryServer) GetParameters(ctx context.Context, req *QueryParametersRequest) (*QueryParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameters not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/persistenceSDK.modules.metas.Query/GetMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMeta(ctx, req.(*QueryMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/persistenceSDK.modules.metas.Query/GetParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetParameters(ctx, req.(*QueryParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "persistenceSDK.modules.metas.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeta",
			Handler:    _Query_GetMeta_Handler,
		},
		{
			MethodName: "GetParameters",
			Handler:    _Query_GetParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "persistenceSDK/modules/metas/query.proto",
}

func (m *QueryMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetaID) > 0 {
		i -= len(m.MetaID)
		copy(dAtA[i:], m.MetaID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetaID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParametersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParametersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParametersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParametersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParametersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParametersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Parameters.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetaID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParametersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParametersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Parameters.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParametersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParametersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParametersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParametersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParametersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParametersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Parameters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
