// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: persistence_sdk/modules/classifications/internal/key/classifictionID.proto

package key

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_persistenceOne_persistenceSDK_schema_types "github.com/persistenceOne/persistenceSDK/schema/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClassificationID struct {
	ChainID github_com_persistenceOne_persistenceSDK_schema_types.ID `protobuf:"bytes,1,opt,name=chain_i_d,json=chainID,proto3,customtype=github.com/persistenceOne/persistenceSDK/schema/types.ID" json:"chain_i_d"`
	HashID  github_com_persistenceOne_persistenceSDK_schema_types.ID `protobuf:"bytes,2,opt,name=hash_i_d,json=hashID,proto3,customtype=github.com/persistenceOne/persistenceSDK/schema/types.ID" json:"hash_i_d"`
}

func (m *ClassificationID) Reset()      { *m = ClassificationID{} }
func (*ClassificationID) ProtoMessage() {}
func (*ClassificationID) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bfd5ee2cc87a76a, []int{0}
}
func (m *ClassificationID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassificationID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassificationID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassificationID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassificationID.Merge(m, src)
}
func (m *ClassificationID) XXX_Size() int {
	return m.Size()
}
func (m *ClassificationID) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassificationID.DiscardUnknown(m)
}

var xxx_messageInfo_ClassificationID proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ClassificationID)(nil), "modules.classifications.internal.key.ClassificationID")
}

func init() {
	proto.RegisterFile("persistence_sdk/modules/classifications/internal/key/classifictionID.proto", fileDescriptor_3bfd5ee2cc87a76a)
}

var fileDescriptor_3bfd5ee2cc87a76a = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xf2, 0x2a, 0x48, 0x2d, 0x2a,
	0xce, 0x2c, 0x2e, 0x49, 0xcd, 0x4b, 0x4e, 0x8d, 0x2f, 0x4e, 0xc9, 0xd6, 0xcf, 0xcd, 0x4f, 0x29,
	0xcd, 0x49, 0x2d, 0xd6, 0x4f, 0xce, 0x49, 0x2c, 0x2e, 0xce, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0xc9,
	0xcc, 0xcf, 0x2b, 0xd6, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0xcf, 0x4e, 0xad,
	0x44, 0x48, 0x82, 0xe4, 0x3c, 0x5d, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x54, 0xa0, 0x7a,
	0xf5, 0xd0, 0xf4, 0xea, 0xc1, 0xf4, 0xea, 0x65, 0xa7, 0x56, 0x4a, 0x89, 0xa4, 0xe7, 0xa7, 0xe7,
	0x83, 0x35, 0xe8, 0x83, 0x58, 0x10, 0xbd, 0x4a, 0x97, 0x18, 0xb9, 0x04, 0x9c, 0x51, 0xb4, 0x79,
	0xba, 0x08, 0xc5, 0x70, 0x71, 0x26, 0x67, 0x24, 0x66, 0xe6, 0xc5, 0x67, 0xc6, 0xa7, 0x48, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x3a, 0x39, 0x9c, 0xb8, 0x27, 0xcf, 0x70, 0xeb, 0x9e, 0xbc, 0x45, 0x7a,
	0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0x92, 0x17, 0xfc, 0xf3, 0x52, 0x91,
	0xb9, 0xc1, 0x2e, 0xde, 0xfa, 0xc5, 0xc9, 0x19, 0xa9, 0xb9, 0x89, 0xfa, 0x25, 0x95, 0x05, 0xa9,
	0xc5, 0x7a, 0x9e, 0x2e, 0x41, 0xec, 0x60, 0x23, 0x3d, 0x5d, 0x84, 0xa2, 0xb8, 0x38, 0x32, 0x12,
	0x8b, 0x33, 0xc0, 0x86, 0x33, 0x51, 0xc9, 0x70, 0x36, 0x90, 0x89, 0x9e, 0x2e, 0x56, 0x2c, 0x33,
	0x16, 0xc8, 0x33, 0x38, 0xa5, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47,
	0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94,
	0x2f, 0xd1, 0x36, 0x10, 0x13, 0x1f, 0x49, 0x6c, 0xe0, 0x40, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x85, 0x7a, 0xd6, 0x81, 0xce, 0x01, 0x00, 0x00,
}

func (m *ClassificationID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassificationID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassificationID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.HashID.Size()
		i -= size
		if _, err := m.HashID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintClassifictionID(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ChainID.Size()
		i -= size
		if _, err := m.ChainID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintClassifictionID(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintClassifictionID(dAtA []byte, offset int, v uint64) int {
	offset -= sovClassifictionID(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClassificationID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChainID.Size()
	n += 1 + l + sovClassifictionID(uint64(l))
	l = m.HashID.Size()
	n += 1 + l + sovClassifictionID(uint64(l))
	return n
}

func sovClassifictionID(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClassifictionID(x uint64) (n int) {
	return sovClassifictionID(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassificationID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassifictionID
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassificationID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassificationID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassifictionID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassifictionID
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassifictionID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassifictionID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassifictionID
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassifictionID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HashID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassifictionID(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassifictionID
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClassifictionID(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClassifictionID
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassifictionID
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassifictionID
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClassifictionID
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClassifictionID
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClassifictionID
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClassifictionID        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClassifictionID          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClassifictionID = fmt.Errorf("proto: unexpected end of group")
)
