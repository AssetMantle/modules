// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: persistence_sdk/modules/classifications/internal/mappable/classification.proto

package mappable

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	base1 "github.com/persistenceOne/persistenceSDK/schema/traits/base"
	base "github.com/persistenceOne/persistenceSDK/schema/types/base"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Classification struct {
	ID            base.ID             `protobuf:"bytes,1,opt,name=i_d,json=iD,proto3" json:"i_d"`
	HasImmutables base1.HasImmutables `protobuf:"bytes,2,opt,name=has_immutables,json=hasImmutables,proto3" json:"has_immutables"`
	HasMutables   base1.HasMutables   `protobuf:"bytes,3,opt,name=has_mutables,json=hasMutables,proto3" json:"has_mutables"`
}

func (m *Classification) Reset()         { *m = Classification{} }
func (m *Classification) String() string { return proto.CompactTextString(m) }
func (*Classification) ProtoMessage()    {}
func (*Classification) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e506b3bc47e585e, []int{0}
}
func (m *Classification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Classification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Classification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Classification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Classification.Merge(m, src)
}
func (m *Classification) XXX_Size() int {
	return m.Size()
}
func (m *Classification) XXX_DiscardUnknown() {
	xxx_messageInfo_Classification.DiscardUnknown(m)
}

var xxx_messageInfo_Classification proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Classification)(nil), "persistence_sdk.modules.classifications.internal.mappable.Classification")
}

func init() {
	proto.RegisterFile("persistence_sdk/modules/classifications/internal/mappable/classification.proto", fileDescriptor_4e506b3bc47e585e)
}

var fileDescriptor_4e506b3bc47e585e = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd2, 0x3f, 0x4b, 0xfb, 0x40,
	0x18, 0x07, 0xf0, 0xa4, 0x2d, 0xbf, 0x21, 0xfd, 0xd9, 0x21, 0x38, 0x94, 0x0e, 0x57, 0x11, 0x04,
	0x71, 0xb8, 0xc3, 0x3f, 0x08, 0x8a, 0x53, 0xed, 0x60, 0x91, 0x2a, 0xd4, 0x45, 0x1c, 0x2c, 0x97,
	0xe4, 0x6c, 0x0e, 0x73, 0xb9, 0x90, 0xe7, 0x3a, 0xf8, 0x0e, 0x9c, 0xc4, 0x97, 0xe0, 0xcb, 0xe9,
	0xd8, 0xd1, 0x49, 0xa4, 0x79, 0x23, 0x92, 0x4b, 0x5a, 0x92, 0x40, 0x21, 0x5b, 0x02, 0xcf, 0xf7,
	0x93, 0x3c, 0xdf, 0x3b, 0xeb, 0x2e, 0x62, 0x31, 0x70, 0x50, 0x2c, 0x74, 0xd9, 0x14, 0xbc, 0x57,
	0x22, 0xa4, 0x37, 0x0f, 0x18, 0x10, 0x37, 0xa0, 0x00, 0xfc, 0x85, 0xbb, 0x54, 0x71, 0x19, 0x02,
	0xe1, 0xa1, 0x62, 0x71, 0x48, 0x03, 0x22, 0x68, 0x14, 0x51, 0x27, 0x60, 0x95, 0x09, 0x1c, 0xc5,
	0x52, 0x49, 0xfb, 0xa2, 0xe2, 0xe1, 0xdc, 0xc3, 0x15, 0x0f, 0xaf, 0x3d, 0xbc, 0xf6, 0x7a, 0xbb,
	0x33, 0x39, 0x93, 0x5a, 0x21, 0xe9, 0x53, 0x06, 0xf6, 0xce, 0xab, 0x3f, 0x08, 0xae, 0xcf, 0x04,
	0x25, 0x2a, 0xa6, 0x5c, 0x01, 0x71, 0x28, 0x30, 0xe2, 0x53, 0x18, 0x09, 0x31, 0x57, 0x29, 0x03,
	0x79, 0xee, 0xac, 0x5e, 0x6e, 0x5c, 0x4e, 0x1d, 0x6d, 0x4b, 0xbd, 0x45, 0x2c, 0x0f, 0x71, 0x2f,
	0x9b, 0xdd, 0xff, 0x68, 0x58, 0x9d, 0xeb, 0xd2, 0x56, 0xf6, 0x95, 0xd5, 0xe4, 0x53, 0xaf, 0x6b,
	0xee, 0x99, 0x87, 0xed, 0x93, 0x03, 0x5c, 0xed, 0x22, 0xc3, 0xb0, 0xc6, 0x70, 0x8a, 0xe1, 0xd1,
	0x70, 0xd0, 0x5a, 0xfc, 0xf4, 0x8d, 0x49, 0x83, 0x0f, 0xed, 0x67, 0xab, 0xe3, 0x53, 0x98, 0xf2,
	0xcd, 0x2a, 0xdd, 0x86, 0x86, 0x8e, 0xb7, 0x42, 0x7a, 0x97, 0x4c, 0xba, 0x29, 0x76, 0x90, 0xa3,
	0x3b, 0xa5, 0x62, 0xec, 0x47, 0xeb, 0x7f, 0xea, 0x6f, 0xf4, 0xa6, 0xd6, 0x49, 0x4d, 0x7d, 0x5c,
	0xb6, 0xdb, 0x85, 0xf2, 0x2e, 0x5b, 0xef, 0x5f, 0x7d, 0x63, 0x10, 0x2c, 0x56, 0xc8, 0x5c, 0xae,
	0x90, 0xf9, 0xbb, 0x42, 0xe6, 0x67, 0x82, 0x8c, 0x65, 0x82, 0x8c, 0xef, 0x04, 0x19, 0x4f, 0x93,
	0x19, 0x57, 0xfe, 0xdc, 0xc1, 0xae, 0x14, 0xa4, 0xf0, 0xb5, 0xfb, 0x90, 0x15, 0x5f, 0x1f, 0x86,
	0xb7, 0xf5, 0xaf, 0x9f, 0xf3, 0x4f, 0x9f, 0xc2, 0xe9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89,
	0xa8, 0xda, 0x41, 0xc2, 0x02, 0x00, 0x00,
}

func (m *Classification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Classification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Classification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HasMutables.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClassification(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.HasImmutables.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClassification(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClassification(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintClassification(dAtA []byte, offset int, v uint64) int {
	offset -= sovClassification(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Classification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovClassification(uint64(l))
	l = m.HasImmutables.Size()
	n += 1 + l + sovClassification(uint64(l))
	l = m.HasMutables.Size()
	n += 1 + l + sovClassification(uint64(l))
	return n
}

func sovClassification(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClassification(x uint64) (n int) {
	return sovClassification(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Classification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Classification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Classification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			fmt.Println(string(dAtA[iNdEx:postIndex]), "Printing string of data bytes to be unmarshalled in classification.pb.go")
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasImmutables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HasImmutables.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMutables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HasMutables.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClassification(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClassification
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClassification
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClassification
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClassification
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClassification        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClassification          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClassification = fmt.Errorf("proto: unexpected end of group")
)
