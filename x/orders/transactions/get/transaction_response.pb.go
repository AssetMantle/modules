// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: AssetMantle/modules/x/orders/transactions/get/transaction_response.proto

package get

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransactionResponse struct {
}

func (m *TransactionResponse) Reset()         { *m = TransactionResponse{} }
func (m *TransactionResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionResponse) ProtoMessage()    {}
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d43aa2b4cd3b55ce, []int{0}
}
func (m *TransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionResponse.Merge(m, src)
}
func (m *TransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TransactionResponse)(nil), "AssetMantle.modules.x.orders.transactions.get.TransactionResponse")
}

func init() {
	proto.RegisterFile("AssetMantle/modules/x/orders/transactions/get/transaction_response.proto", fileDescriptor_d43aa2b4cd3b55ce)
}

var fileDescriptor_d43aa2b4cd3b55ce = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x86, 0x93, 0x14, 0x57, 0xa4, 0x54, 0x04, 0xab, 0x2d, 0xec, 0xdd, 0x45, 0x6d, 0x74, 0xba,
	0x4b, 0x13, 0x9b, 0x70, 0x41, 0x52, 0x04, 0x59, 0x90, 0xbd, 0x64, 0x88, 0x07, 0x97, 0xec, 0xb1,
	0x3b, 0x07, 0xf7, 0x18, 0x3e, 0x83, 0xa5, 0x4f, 0x22, 0x56, 0x57, 0x5a, 0x4a, 0xd2, 0xf9, 0x0a,
	0x36, 0xa2, 0x59, 0x70, 0x0f, 0x6c, 0xd2, 0x0e, 0xdf, 0xff, 0xcd, 0xbf, 0x3b, 0xf1, 0xed, 0xdc,
	0x5a, 0xa4, 0x4c, 0x75, 0xb4, 0x46, 0xd1, 0xea, 0x7a, 0xbb, 0x46, 0x2b, 0x76, 0x42, 0x9b, 0x1a,
	0x8d, 0x15, 0x64, 0x54, 0x67, 0x55, 0x45, 0x2b, 0xdd, 0x59, 0xd1, 0x20, 0xf9, 0x83, 0x07, 0x83,
	0x76, 0xa3, 0x3b, 0x8b, 0x7c, 0x63, 0x34, 0xe9, 0xa3, 0x73, 0xcf, 0xc4, 0x9d, 0x89, 0xef, 0xf8,
	0x68, 0xe2, 0xbe, 0x89, 0x37, 0x48, 0x67, 0x27, 0xf1, 0x71, 0xf1, 0x37, 0xbb, 0x73, 0xae, 0xe4,
	0x2b, 0x7a, 0xed, 0x59, 0xb8, 0xef, 0x59, 0xf8, 0xd1, 0xb3, 0xf0, 0x69, 0x60, 0xc1, 0x7e, 0x60,
	0xc1, 0xfb, 0xc0, 0x82, 0xf8, 0xa2, 0xd2, 0x2d, 0x9f, 0xb4, 0x24, 0x39, 0xfd, 0x67, 0x45, 0xfe,
	0xd3, 0x36, 0x0f, 0xef, 0xaf, 0x9b, 0x15, 0x3d, 0x6e, 0x97, 0xbc, 0xd2, 0xad, 0x98, 0xf4, 0x09,
	0xcf, 0xd1, 0x6c, 0x9e, 0x95, 0x8b, 0x22, 0x7d, 0x89, 0x0e, 0xde, 0x9c, 0xb9, 0x3a, 0x25, 0x5f,
	0x8c, 0x75, 0x0a, 0xbf, 0x4e, 0x8a, 0xf4, 0x76, 0xc0, 0x4b, 0xc7, 0xcb, 0x52, 0x8e, 0xbc, 0xf4,
	0x79, 0x99, 0x22, 0xf5, 0xd1, 0xcd, 0x24, 0x5e, 0xa6, 0x79, 0x92, 0x21, 0xa9, 0x5a, 0x91, 0xfa,
	0x8c, 0x2e, 0xbd, 0x2c, 0x80, 0x0b, 0x03, 0x94, 0x00, 0x63, 0x1c, 0xc0, 0xcf, 0x03, 0xa4, 0x48,
	0xcb, 0xd9, 0xef, 0x29, 0xaf, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x2a, 0x78, 0x5d, 0x16,
	0x02, 0x00, 0x00,
}

func (m *TransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTransactionResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransactionResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTransactionResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransactionResponse(x uint64) (n int) {
	return sovTransactionResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransactionResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransactionResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransactionResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransactionResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransactionResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransactionResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransactionResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransactionResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransactionResponse = fmt.Errorf("proto: unexpected end of group")
)
