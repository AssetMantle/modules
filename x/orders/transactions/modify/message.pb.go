// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: AssetMantle/modules/x/orders/transactions/modify/message.proto

package modify

import (
	fmt "fmt"
	base "github.com/AssetMantle/schema/ids/base"
	base2 "github.com/AssetMantle/schema/lists/base"
	base1 "github.com/AssetMantle/schema/types/base"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	From                  string              `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	FromID                *base.IdentityID    `protobuf:"bytes,2,opt,name=from_i_d,json=fromID,proto3" json:"from_i_d,omitempty"`
	OrderID               *base.OrderID       `protobuf:"bytes,3,opt,name=order_i_d,json=orderID,proto3" json:"order_i_d,omitempty"`
	MakerSplit            string              `protobuf:"bytes,4,opt,name=maker_split,json=makerSplit,proto3" json:"maker_split,omitempty"`
	TakerSplit            string              `protobuf:"bytes,5,opt,name=taker_split,json=takerSplit,proto3" json:"taker_split,omitempty"`
	ExpiresIn             *base1.Height       `protobuf:"bytes,6,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	MutableMetaProperties *base2.PropertyList `protobuf:"bytes,7,opt,name=mutable_meta_properties,json=mutableMetaProperties,proto3" json:"mutable_meta_properties,omitempty"`
	MutableProperties     *base2.PropertyList `protobuf:"bytes,8,opt,name=mutable_properties,json=mutableProperties,proto3" json:"mutable_properties,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4742c0e8c53933c, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Message) GetFromID() *base.IdentityID {
	if m != nil {
		return m.FromID
	}
	return nil
}

func (m *Message) GetOrderID() *base.OrderID {
	if m != nil {
		return m.OrderID
	}
	return nil
}

func (m *Message) GetMakerSplit() string {
	if m != nil {
		return m.MakerSplit
	}
	return ""
}

func (m *Message) GetTakerSplit() string {
	if m != nil {
		return m.TakerSplit
	}
	return ""
}

func (m *Message) GetExpiresIn() *base1.Height {
	if m != nil {
		return m.ExpiresIn
	}
	return nil
}

func (m *Message) GetMutableMetaProperties() *base2.PropertyList {
	if m != nil {
		return m.MutableMetaProperties
	}
	return nil
}

func (m *Message) GetMutableProperties() *base2.PropertyList {
	if m != nil {
		return m.MutableProperties
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "AssetMantle.modules.x.orders.transactions.modify.Message")
}

func init() {
	proto.RegisterFile("AssetMantle/modules/x/orders/transactions/modify/message.proto", fileDescriptor_d4742c0e8c53933c)
}

var fileDescriptor_d4742c0e8c53933c = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0xc7, 0x9b, 0x76, 0x6d, 0xb7, 0xb3, 0x5e, 0x0c, 0x88, 0x61, 0x0f, 0x71, 0x11, 0xc5, 0x45,
	0x71, 0xe2, 0xeb, 0x25, 0x8a, 0xd8, 0x52, 0xd0, 0x82, 0x61, 0x4b, 0xdc, 0x43, 0x59, 0x02, 0x61,
	0x9a, 0x4c, 0xdb, 0xc1, 0x24, 0x13, 0x32, 0x53, 0x68, 0x8e, 0x7e, 0x03, 0x3f, 0x83, 0x47, 0x3f,
	0x89, 0x78, 0xda, 0xa3, 0x47, 0x69, 0x6f, 0xfa, 0x25, 0x64, 0x5e, 0xdc, 0xce, 0x42, 0x29, 0xf4,
	0xd4, 0x30, 0xfd, 0xff, 0x7e, 0xf3, 0xcc, 0x33, 0xcf, 0x80, 0xb7, 0x3d, 0xc6, 0x30, 0x0f, 0x50,
	0xc1, 0x33, 0xec, 0xe5, 0x34, 0x5d, 0x64, 0x98, 0x79, 0x4b, 0x8f, 0x56, 0x29, 0xae, 0x98, 0xc7,
	0x2b, 0x54, 0x30, 0x94, 0x70, 0x42, 0x0b, 0x26, 0xfe, 0x25, 0xd3, 0xda, 0xcb, 0x31, 0x63, 0x68,
	0x86, 0x61, 0x59, 0x51, 0x4e, 0xed, 0xa7, 0x06, 0x0f, 0x35, 0x0f, 0x97, 0x50, 0xf1, 0xd0, 0xe4,
	0xa1, 0xe2, 0x8f, 0x9f, 0x98, 0x3b, 0xb2, 0x64, 0x8e, 0x73, 0xe4, 0x91, 0x94, 0x79, 0x13, 0xc4,
	0xb0, 0x47, 0x52, 0x5c, 0x70, 0xc2, 0xeb, 0x98, 0xa4, 0x6a, 0x83, 0xe3, 0x47, 0xbb, 0xe2, 0x72,
	0x9b, 0x4d, 0xf6, 0xd9, 0x96, 0x6c, 0x46, 0x18, 0xd7, 0xe9, 0xb2, 0xa2, 0x25, 0xae, 0x78, 0x1d,
	0x8b, 0xb5, 0x1d, 0x7a, 0x5e, 0x97, 0x58, 0x23, 0x73, 0x4c, 0x66, 0x73, 0x9d, 0xbd, 0xf7, 0xb7,
	0x05, 0x3a, 0x81, 0x3a, 0xbd, 0x6d, 0x83, 0x83, 0x69, 0x45, 0x73, 0xc7, 0x3a, 0xb1, 0x4e, 0xbb,
	0xa1, 0xfc, 0xb6, 0x7b, 0xe0, 0x50, 0xfc, 0xc6, 0x24, 0x4e, 0x9d, 0xe6, 0x89, 0x75, 0x7a, 0xf4,
	0xfc, 0x21, 0x34, 0xdb, 0xa3, 0xf4, 0x90, 0xa4, 0x0c, 0x0a, 0x39, 0x1c, 0xea, 0xc3, 0x0e, 0x07,
	0x61, 0x5b, 0x80, 0xc3, 0x81, 0xfd, 0x0e, 0x74, 0xf5, 0x99, 0xe2, 0xd4, 0x69, 0x49, 0xc7, 0xfd,
	0x9d, 0x8e, 0x33, 0x91, 0x1e, 0x0e, 0xc2, 0x0e, 0x55, 0x1f, 0xf6, 0x5d, 0x70, 0x94, 0xa3, 0xcf,
	0xb8, 0x8a, 0x59, 0x99, 0x11, 0xee, 0x1c, 0xc8, 0xfa, 0x80, 0x5c, 0xfa, 0x24, 0x56, 0x44, 0x80,
	0x1b, 0x81, 0x1b, 0x2a, 0xc0, 0x37, 0x81, 0x01, 0x00, 0x78, 0x59, 0x92, 0x0a, 0xb3, 0x98, 0x14,
	0x4e, 0x5b, 0x16, 0xf1, 0x60, 0x5b, 0x11, 0xb2, 0x4f, 0xaa, 0x8c, 0x0f, 0xb2, 0x4f, 0x61, 0x57,
	0x83, 0xc3, 0xc2, 0x4e, 0xc0, 0x9d, 0x7c, 0xc1, 0xd1, 0x24, 0xc3, 0x71, 0x8e, 0x39, 0x8a, 0x75,
	0xf3, 0x09, 0x66, 0x4e, 0x47, 0x2a, 0x1f, 0x6f, 0x53, 0xca, 0xdb, 0x52, 0xca, 0x91, 0xbe, 0xad,
	0x8f, 0x84, 0xf1, 0xf0, 0xb6, 0x76, 0x05, 0x98, 0xa3, 0xd1, 0x95, 0xc9, 0xbe, 0x00, 0xf6, 0xff,
	0x4d, 0x0c, 0xff, 0xe1, 0xfe, 0xfe, 0x5b, 0x5a, 0xb3, 0x71, 0xf7, 0xbf, 0xb4, 0x7e, 0xac, 0x5c,
	0xeb, 0x72, 0xe5, 0x5a, 0xbf, 0x57, 0xae, 0xf5, 0x75, 0xed, 0x36, 0x2e, 0xd7, 0x6e, 0xe3, 0xd7,
	0xda, 0x6d, 0x80, 0x97, 0x09, 0xcd, 0xe1, 0xbe, 0x83, 0xdf, 0xbf, 0xa9, 0x67, 0x67, 0x24, 0x86,
	0x69, 0x64, 0x5d, 0xbc, 0x9e, 0x11, 0x3e, 0x5f, 0x4c, 0x60, 0x42, 0x73, 0x6f, 0xdf, 0x57, 0xf8,
	0xad, 0xd9, 0xee, 0x05, 0xe3, 0xb3, 0xf3, 0xe0, 0x7b, 0xf3, 0xda, 0x0b, 0x0c, 0x74, 0x21, 0x63,
	0x35, 0x18, 0x0c, 0x9e, 0x9b, 0x85, 0x04, 0x92, 0xfd, 0x79, 0x0d, 0x89, 0x34, 0x12, 0x8d, 0x23,
	0x85, 0x44, 0x26, 0x12, 0x29, 0x64, 0xd5, 0x7c, 0xb3, 0x2f, 0x12, 0xbd, 0x1f, 0xf5, 0xc5, 0x6d,
	0xa5, 0x88, 0xa3, 0x3f, 0xcd, 0x57, 0x06, 0xee, 0xfb, 0x9a, 0xf7, 0xfd, 0xb1, 0xef, 0x2b, 0x83,
	0xef, 0x9b, 0x0a, 0x99, 0x20, 0xd3, 0x7a, 0xd2, 0x96, 0x0f, 0xef, 0xc5, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x2f, 0x1b, 0x75, 0x58, 0xa6, 0x04, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MutableProperties != nil {
		{
			size, err := m.MutableProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.MutableMetaProperties != nil {
		{
			size, err := m.MutableMetaProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ExpiresIn != nil {
		{
			size, err := m.ExpiresIn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.TakerSplit) > 0 {
		i -= len(m.TakerSplit)
		copy(dAtA[i:], m.TakerSplit)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TakerSplit)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MakerSplit) > 0 {
		i -= len(m.MakerSplit)
		copy(dAtA[i:], m.MakerSplit)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MakerSplit)))
		i--
		dAtA[i] = 0x22
	}
	if m.OrderID != nil {
		{
			size, err := m.OrderID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FromID != nil {
		{
			size, err := m.FromID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.FromID != nil {
		l = m.FromID.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.OrderID != nil {
		l = m.OrderID.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.MakerSplit)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TakerSplit)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExpiresIn != nil {
		l = m.ExpiresIn.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MutableMetaProperties != nil {
		l = m.MutableMetaProperties.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MutableProperties != nil {
		l = m.MutableProperties.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromID == nil {
				m.FromID = &base.IdentityID{}
			}
			if err := m.FromID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderID == nil {
				m.OrderID = &base.OrderID{}
			}
			if err := m.OrderID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerSplit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerSplit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerSplit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerSplit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresIn == nil {
				m.ExpiresIn = &base1.Height{}
			}
			if err := m.ExpiresIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutableMetaProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MutableMetaProperties == nil {
				m.MutableMetaProperties = &base2.PropertyList{}
			}
			if err := m.MutableMetaProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MutableProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MutableProperties == nil {
				m.MutableProperties = &base2.PropertyList{}
			}
			if err := m.MutableProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
