// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/splits/internal/queries/splits/queryRequest.proto

package splits

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	query "github.com/cosmos/cosmos-sdk/types/query"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryRequest struct {
	PageRequest *query.PageRequest `protobuf:"bytes,1,opt,name=page_request,json=pageRequest,proto3" json:"page_request,omitempty"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fda76af244d360b, []int{0}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetPageRequest() *query.PageRequest {
	if m != nil {
		return m.PageRequest
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRequest)(nil), "assetmantle.modules.splits.queries.splits.QueryRequest")
}

func init() {
	proto.RegisterFile("x/splits/internal/queries/splits/queryRequest.proto", fileDescriptor_3fda76af244d360b)
}

var fileDescriptor_3fda76af244d360b = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x9b, 0x80, 0x0e, 0x69, 0x17, 0x3b, 0x89, 0x43, 0x10, 0x07, 0xb1, 0x42, 0xef, 0xa8,
	0xc5, 0x25, 0x8b, 0xb4, 0x8b, 0x38, 0x04, 0xd2, 0x76, 0x52, 0x02, 0xf2, 0xd2, 0x3e, 0x62, 0x20,
	0xc9, 0xa5, 0xb9, 0x8b, 0xd8, 0x6f, 0xe1, 0x67, 0x70, 0xf4, 0x93, 0x88, 0x53, 0x47, 0x47, 0x49,
	0x71, 0xf1, 0x53, 0x48, 0x72, 0xaf, 0x18, 0x27, 0x3b, 0xfe, 0xdf, 0xfd, 0xff, 0xbf, 0xf7, 0xbf,
	0x3b, 0x6b, 0xf8, 0xc4, 0x65, 0x16, 0x47, 0x4a, 0xf2, 0x28, 0x55, 0x98, 0xa7, 0x10, 0xf3, 0x65,
	0x81, 0x79, 0x84, 0x72, 0x3b, 0xaf, 0xe4, 0x6a, 0x8a, 0xcb, 0x02, 0xa5, 0x62, 0x59, 0x2e, 0x94,
	0xe8, 0xf6, 0x40, 0x4a, 0x54, 0x09, 0xa4, 0x2a, 0x46, 0x96, 0x88, 0x45, 0x11, 0xa3, 0x64, 0xda,
	0xce, 0x28, 0x4d, 0xf2, 0xe8, 0x7c, 0x2e, 0x64, 0x22, 0x24, 0x0f, 0x40, 0xa2, 0x46, 0xf1, 0xc7,
	0x41, 0x80, 0x0a, 0x06, 0x3c, 0x83, 0x30, 0x4a, 0x41, 0x45, 0x22, 0xd5, 0xd8, 0x93, 0x5b, 0xab,
	0x33, 0x69, 0x2c, 0xeb, 0xde, 0x58, 0x9d, 0x0c, 0x42, 0xbc, 0xcf, 0xb5, 0x3e, 0x34, 0x8e, 0x8d,
	0xb3, 0xf6, 0xc5, 0x29, 0xd3, 0x48, 0x56, 0x21, 0xeb, 0x75, 0x2b, 0x46, 0x48, 0xe6, 0x41, 0x88,
	0x94, 0x9e, 0xb6, 0xb3, 0x5f, 0x31, 0xfe, 0x32, 0xdf, 0x4a, 0xdb, 0x58, 0x97, 0xb6, 0xf1, 0x59,
	0xda, 0xc6, 0xf3, 0xc6, 0x6e, 0xad, 0x37, 0x76, 0xeb, 0x63, 0x63, 0xb7, 0xac, 0xfe, 0x5c, 0x24,
	0x6c, 0xe7, 0x0b, 0x8d, 0x0f, 0x9a, 0x15, 0xbd, 0xaa, 0xb7, 0x67, 0xdc, 0x5d, 0x85, 0x91, 0x7a,
	0x28, 0x02, 0x36, 0x17, 0x09, 0x1f, 0x55, 0x28, 0xb7, 0x46, 0x71, 0x42, 0xf1, 0xff, 0x1e, 0xf9,
	0xc5, 0xdc, 0x1b, 0xb9, 0xb3, 0xc9, 0xec, 0xd5, 0xec, 0x8d, 0x1a, 0x4d, 0x5c, 0x6a, 0x32, 0xd3,
	0x4d, 0x26, 0xd4, 0x44, 0xcb, 0xf7, 0x3f, 0x5e, 0x9f, 0xbc, 0xbe, 0x3e, 0xf4, 0xc9, 0x4b, 0xb2,
	0x34, 0x2f, 0x77, 0xf6, 0xfa, 0xd7, 0xde, 0xd8, 0x45, 0x05, 0x0b, 0x50, 0xf0, 0x6d, 0xf6, 0x1b,
	0x39, 0xc7, 0xa1, 0xa0, 0xe3, 0x68, 0xab, 0xe3, 0x50, 0x74, 0x3b, 0x08, 0xf6, 0xeb, 0x9f, 0x1c,
	0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xad, 0xb2, 0x70, 0xc9, 0x57, 0x02, 0x00, 0x00,
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageRequest != nil {
		{
			size, err := m.PageRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryRequest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageRequest != nil {
		l = m.PageRequest.Size()
		n += 1 + l + sovQueryRequest(uint64(l))
	}
	return n
}

func sovQueryRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryRequest(x uint64) (n int) {
	return sovQueryRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageRequest == nil {
				m.PageRequest = &query.PageRequest{}
			}
			if err := m.PageRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryRequest = fmt.Errorf("proto: unexpected end of group")
)
