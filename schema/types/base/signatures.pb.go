// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: persistenceSDK/schema/types/base/signatures.proto

package base

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Signatures struct {
	SignatureList []Signature `protobuf:"bytes,1,rep,name=signature_list,json=signatureList,proto3" json:"signature_list"`
}

func (m *Signatures) Reset()         { *m = Signatures{} }
func (m *Signatures) String() string { return proto.CompactTextString(m) }
func (*Signatures) ProtoMessage()    {}
func (*Signatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_415d2712ad9a7b4d, []int{0}
}
func (m *Signatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signatures.Merge(m, src)
}
func (m *Signatures) XXX_Size() int {
	return m.Size()
}
func (m *Signatures) XXX_DiscardUnknown() {
	xxx_messageInfo_Signatures.DiscardUnknown(m)
}

var xxx_messageInfo_Signatures proto.InternalMessageInfo

func (m *Signatures) GetSignatureList() []Signature {
	if m != nil {
		return m.SignatureList
	}
	return nil
}

func init() {
	proto.RegisterType((*Signatures)(nil), "persistenceSDK.schema.types.base.Signatures")
}

func init() {
	proto.RegisterFile("persistenceSDK/schema/types/base/signatures.proto", fileDescriptor_415d2712ad9a7b4d)
}

var fileDescriptor_415d2712ad9a7b4d = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2c, 0x48, 0x2d, 0x2a,
	0xce, 0x2c, 0x2e, 0x49, 0xcd, 0x4b, 0x4e, 0x0d, 0x76, 0xf1, 0xd6, 0x2f, 0x4e, 0xce, 0x48, 0xcd,
	0x4d, 0xd4, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x4f, 0x4a, 0x2c, 0x4e, 0xd5, 0x2f, 0xce, 0x4c,
	0xcf, 0x4b, 0x2c, 0x29, 0x2d, 0x4a, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x52, 0x40,
	0xd5, 0xa2, 0x07, 0xd1, 0xa2, 0x07, 0xd6, 0xa2, 0x07, 0xd2, 0x22, 0x25, 0x92, 0x9e, 0x9f, 0x9e,
	0x0f, 0x56, 0xac, 0x0f, 0x62, 0x41, 0xf4, 0x49, 0x19, 0x10, 0x6f, 0x15, 0x44, 0x87, 0x52, 0x0e,
	0x17, 0x57, 0x30, 0xdc, 0x76, 0xa1, 0x08, 0x2e, 0x3e, 0xb8, 0x82, 0xf8, 0x9c, 0xcc, 0xe2, 0x12,
	0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x6d, 0x3d, 0x42, 0x0e, 0xd2, 0x83, 0x9b, 0xe2, 0xc4,
	0x72, 0xe2, 0x9e, 0x3c, 0x43, 0x10, 0x2f, 0xdc, 0x20, 0x9f, 0xcc, 0xe2, 0x12, 0x2b, 0x96, 0x86,
	0x3b, 0x0a, 0x0c, 0x4e, 0x21, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91,
	0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65,
	0x95, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x8f, 0x64, 0x97, 0x7f, 0x5e,
	0xaa, 0x3e, 0x21, 0x3f, 0x25, 0xb1, 0x81, 0xbd, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x6e,
	0xa4, 0x4a, 0x82, 0x69, 0x01, 0x00, 0x00,
}

func (m *Signatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureList) > 0 {
		for iNdEx := len(m.SignatureList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSignatures(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSignatures(dAtA []byte, offset int, v uint64) int {
	offset -= sovSignatures(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Signatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureList) > 0 {
		for _, e := range m.SignatureList {
			l = e.Size()
			n += 1 + l + sovSignatures(uint64(l))
		}
	}
	return n
}

func sovSignatures(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSignatures(x uint64) (n int) {
	return sovSignatures(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Signatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignatures
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSignatures
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSignatures
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureList = append(m.SignatureList, Signature{})
			if err := m.SignatureList[len(m.SignatureList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSignatures(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignatures
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignatures(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignatures
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignatures
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSignatures
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSignatures
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSignatures
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSignatures        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignatures          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSignatures = fmt.Errorf("proto: unexpected end of group")
)
