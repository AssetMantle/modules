// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: persistence_sdk/schema/types/base/metaFact.proto

package base

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	"github.com/persistenceOne/persistenceSDK/schema/types"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MetaFact struct {
	//  option (gogoproto.goproto_stringer) = false;
	//  string data = 1 [(gogoproto.customtype) = "github.com/persistenceOne/persistenceSDK/schema/types.Data", (gogoproto.nullable) = false, (cosmos_proto.accepts_interface) = "github.com/persistenceOne/persistenceSDK/schema/types.Data"];
	Signatures Signatures `protobuf:"bytes,1,opt,name=signatures,proto3" json:"signatures"`
	Data       Data       `protobuf:"bytes,2,opt,name=data,proto3" json:"data"`
}

func (m *MetaFact) Reset()         { *m = MetaFact{} }
func (m *MetaFact) String() string { return proto.CompactTextString(m) }
func (*MetaFact) ProtoMessage()    {}
func (*MetaFact) Descriptor() ([]byte, []int) {
	return fileDescriptor_f343a26a3fac91f5, []int{0}
}
func (m *MetaFact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetaFact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetaFact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetaFact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaFact.Merge(m, src)
}
func (m *MetaFact) XXX_Size() int {
	return m.Size()
}
func (m *MetaFact) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaFact.DiscardUnknown(m)
}

var xxx_messageInfo_MetaFact proto.InternalMessageInfo

type Data struct {
	// Types that are valid to be assigned to Data:
	//	*Data_DecData
	//	*Data_HeightData
	//	*Data_IdData
	//	*Data_ListData
	//	*Data_StringData
	//	*Data_AccAddressData
	Data types.Data `protobuf_oneof:"data"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f343a26a3fac91f5, []int{1}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

type isData_Data interface {
	isData_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Data_DecData struct {
	DecData *DecData `protobuf:"bytes,1,opt,name=dec_data,json=decData,proto3,oneof" json:"dec_data,omitempty"`
}
type Data_HeightData struct {
	HeightData *HeightData `protobuf:"bytes,2,opt,name=height_data,json=heightData,proto3,oneof" json:"height_data,omitempty"`
}
type Data_IdData struct {
	IdData *IDData `protobuf:"bytes,3,opt,name=id_data,json=idData,proto3,oneof" json:"id_data,omitempty"`
}
type Data_ListData struct {
	ListData *ListData `protobuf:"bytes,4,opt,name=list_data,json=listData,proto3,oneof" json:"list_data,omitempty"`
}
type Data_StringData struct {
	StringData *StringData `protobuf:"bytes,5,opt,name=string_data,json=stringData,proto3,oneof" json:"string_data,omitempty"`
}
type Data_AccAddressData struct {
	AccAddressData *AccAddressData `protobuf:"bytes,6,opt,name=acc_address_data,json=accAddressData,proto3,oneof" json:"acc_address_data,omitempty"`
}

func (*Data_DecData) isData_Data()        {}
func (*Data_HeightData) isData_Data()     {}
func (*Data_IdData) isData_Data()         {}
func (*Data_ListData) isData_Data()       {}
func (*Data_StringData) isData_Data()     {}
func (*Data_AccAddressData) isData_Data() {}

func (m *Data) GetData() types.Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Data) GetDecData() *DecData {
	if x, ok := m.GetData().(*Data_DecData); ok {
		return x.DecData
	}
	return nil
}

func (m *Data) GetHeightData() *HeightData {
	if x, ok := m.GetData().(*Data_HeightData); ok {
		return x.HeightData
	}
	return nil
}

func (m *Data) GetIdData() *IDData {
	if x, ok := m.GetData().(*Data_IdData); ok {
		return x.IdData
	}
	return nil
}

func (m *Data) GetListData() *ListData {
	if x, ok := m.GetData().(*Data_ListData); ok {
		return x.ListData
	}
	return nil
}

func (m *Data) GetStringData() *StringData {
	if x, ok := m.GetData().(*Data_StringData); ok {
		return x.StringData
	}
	return nil
}

func (m *Data) GetAccAddressData() *AccAddressData {
	if x, ok := m.GetData().(*Data_AccAddressData); ok {
		return x.AccAddressData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Data) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Data_DecData)(nil),
		(*Data_HeightData)(nil),
		(*Data_IdData)(nil),
		(*Data_ListData)(nil),
		(*Data_StringData)(nil),
		(*Data_AccAddressData)(nil),
	}
}

func init() {
	proto.RegisterType((*MetaFact)(nil), "persistence_sdk.schema.types.base.MetaFact")
	proto.RegisterType((*Data)(nil), "persistence_sdk.schema.types.base.data")
}

func init() {
	proto.RegisterFile("persistence_sdk/schema/types/base/metaFact.proto", fileDescriptor_f343a26a3fac91f5)
}

var fileDescriptor_f343a26a3fac91f5 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x3d, 0x6f, 0xd4, 0x30,
	0x18, 0xc7, 0x1d, 0x1a, 0xd2, 0xc3, 0x95, 0x10, 0xb2, 0x18, 0x4a, 0x87, 0x14, 0xba, 0xf0, 0x26,
	0x1c, 0x28, 0x12, 0x43, 0xb7, 0x3b, 0x45, 0x10, 0xde, 0x04, 0xca, 0x31, 0x21, 0xa1, 0xc8, 0x67,
	0x5b, 0x89, 0x05, 0x49, 0x4e, 0xb1, 0x3b, 0xf0, 0x0d, 0x18, 0xf9, 0x08, 0x8c, 0x7c, 0x94, 0x8e,
	0x1d, 0x99, 0x10, 0xba, 0x5b, 0xf9, 0x10, 0x28, 0x7e, 0xd2, 0x4b, 0x0e, 0x86, 0x98, 0x2d, 0x96,
	0xfd, 0xff, 0xe5, 0x79, 0xfc, 0xfc, 0x8c, 0x1f, 0x2e, 0x65, 0xa3, 0x95, 0x36, 0xb2, 0xe2, 0x32,
	0xd3, 0xe2, 0x63, 0xa4, 0x79, 0x21, 0x4b, 0x16, 0x99, 0xcf, 0x4b, 0xa9, 0xa3, 0x05, 0xd3, 0x32,
	0x2a, 0xa5, 0x61, 0x4f, 0x19, 0x37, 0x74, 0xd9, 0xd4, 0xa6, 0x26, 0xb7, 0xfe, 0x4a, 0x50, 0x48,
	0x50, 0x9b, 0xa0, 0x6d, 0xe2, 0xe0, 0x7a, 0x5e, 0xe7, 0xb5, 0x3d, 0x1d, 0xb5, 0x5f, 0x10, 0x3c,
	0xb8, 0xc1, 0x6b, 0x5d, 0xd6, 0x3a, 0x83, 0x0d, 0x58, 0x74, 0x5b, 0xc7, 0xe3, 0x55, 0x68, 0x95,
	0x57, 0xcc, 0x9c, 0x36, 0xf2, 0x22, 0x13, 0x8d, 0x67, 0x84, 0xe4, 0x31, 0x33, 0xcc, 0xfd, 0x27,
	0x85, 0x54, 0x79, 0x61, 0x06, 0x19, 0x3a, 0x9e, 0x51, 0x62, 0x70, 0xde, 0xe1, 0x3a, 0x3f, 0x29,
	0x6d, 0xfe, 0xaf, 0x2a, 0x6d, 0x1a, 0x55, 0xe5, 0x83, 0xcc, 0x93, 0xf1, 0x0c, 0xe3, 0x7c, 0x2a,
	0x44, 0x23, 0xb5, 0xee, 0x73, 0x47, 0xdf, 0x3d, 0x3c, 0x79, 0xdd, 0x4d, 0x93, 0xcc, 0x31, 0xee,
	0xef, 0x74, 0xdf, 0xbb, 0xe9, 0xdd, 0xd9, 0x3b, 0x7e, 0x40, 0x47, 0x87, 0x4b, 0xe7, 0x9b, 0xd0,
	0xcc, 0x3f, 0xfb, 0x79, 0x88, 0xd2, 0x01, 0x86, 0x4c, 0xb1, 0x2f, 0x98, 0x61, 0xfb, 0x97, 0x2c,
	0xee, 0xb6, 0x03, 0xae, 0x3d, 0xde, 0x81, 0x6c, 0xf4, 0xc4, 0xff, 0xf2, 0xed, 0x10, 0x1d, 0xfd,
	0xde, 0x01, 0x12, 0x79, 0x86, 0x27, 0x42, 0xf2, 0xcc, 0x52, 0xa1, 0xc8, 0x7b, 0x0e, 0xd4, 0x18,
	0x26, 0x9f, 0xa0, 0x74, 0xb7, 0x93, 0x80, 0xbc, 0xc5, 0x7b, 0x30, 0xde, 0x6c, 0x50, 0xa1, 0x4b,
	0xc3, 0xc9, 0x46, 0x8a, 0x04, 0xa5, 0xb8, 0x57, 0x84, 0xc4, 0x78, 0x57, 0x09, 0xa0, 0xed, 0x58,
	0xda, 0x5d, 0x07, 0xda, 0xf3, 0xb8, 0x23, 0x05, 0x20, 0x0e, 0x79, 0x81, 0xaf, 0xb4, 0x4a, 0x00,
	0xc7, 0xb7, 0x9c, 0xfb, 0x0e, 0x9c, 0x57, 0x9d, 0x46, 0x09, 0x4a, 0x27, 0x17, 0x4a, 0xb5, 0x3d,
	0x82, 0x2c, 0x40, 0xbb, 0xec, 0x3e, 0xd4, 0x8d, 0x62, 0x6d, 0x8f, 0xbd, 0x70, 0xe4, 0x03, 0xbe,
	0xc6, 0x38, 0xcf, 0x18, 0xb8, 0x04, 0xd8, 0xc0, 0x62, 0x1f, 0x39, 0x60, 0xa7, 0x5b, 0x16, 0x26,
	0x28, 0xbd, 0xba, 0xed, 0xe5, 0x2c, 0x80, 0x29, 0xcf, 0xde, 0x9d, 0xad, 0x42, 0xef, 0x7c, 0x15,
	0x7a, 0xbf, 0x56, 0xa1, 0xf7, 0x75, 0x1d, 0xa2, 0xf3, 0x75, 0x88, 0x7e, 0xac, 0x43, 0xf4, 0xfe,
	0x24, 0x57, 0xa6, 0x38, 0x5d, 0x50, 0x5e, 0x97, 0xc3, 0x17, 0xff, 0xa6, 0x92, 0xc3, 0xe5, 0x3c,
	0x7e, 0xf9, 0xef, 0x23, 0x58, 0x04, 0x56, 0xfb, 0xc7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3b,
	0x0d, 0x01, 0x71, 0xe5, 0x04, 0x00, 0x00,
}

func (m *MetaFact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaFact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetaFact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetaFact(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Signatures.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetaFact(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Data_DecData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_DecData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecData != nil {
		{
			size, err := m.DecData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaFact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Data_HeightData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_HeightData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HeightData != nil {
		{
			size, err := m.HeightData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaFact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Data_IdData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_IdData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdData != nil {
		{
			size, err := m.IdData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaFact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Data_ListData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_ListData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ListData != nil {
		{
			size, err := m.ListData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaFact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Data_StringData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_StringData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StringData != nil {
		{
			size, err := m.StringData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaFact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Data_AccAddressData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_AccAddressData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccAddressData != nil {
		{
			size, err := m.AccAddressData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMetaFact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintMetaFact(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetaFact(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MetaFact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Signatures.Size()
	n += 1 + l + sovMetaFact(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovMetaFact(uint64(l))
	return n
}

func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *Data_DecData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecData != nil {
		l = m.DecData.Size()
		n += 1 + l + sovMetaFact(uint64(l))
	}
	return n
}
func (m *Data_HeightData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeightData != nil {
		l = m.HeightData.Size()
		n += 1 + l + sovMetaFact(uint64(l))
	}
	return n
}
func (m *Data_IdData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdData != nil {
		l = m.IdData.Size()
		n += 1 + l + sovMetaFact(uint64(l))
	}
	return n
}
func (m *Data_ListData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListData != nil {
		l = m.ListData.Size()
		n += 1 + l + sovMetaFact(uint64(l))
	}
	return n
}
func (m *Data_StringData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StringData != nil {
		l = m.StringData.Size()
		n += 1 + l + sovMetaFact(uint64(l))
	}
	return n
}
func (m *Data_AccAddressData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccAddressData != nil {
		l = m.AccAddressData.Size()
		n += 1 + l + sovMetaFact(uint64(l))
	}
	return n
}

func sovMetaFact(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetaFact(x uint64) (n int) {
	return sovMetaFact(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetaFact) Unmarshal(dAtA []byte) error {
	fmt.Println(string(dAtA), "--------")
	fmt.Println(m, "Metafact -------")
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaFact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaFact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaFact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Signatures.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetaFact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetaFact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetaFact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_DecData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeightData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_HeightData{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IDData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_IdData{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_ListData{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_StringData{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddressData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetaFact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetaFact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccAddressData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_AccAddressData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetaFact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetaFact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetaFact(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetaFact
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetaFact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetaFact
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetaFact
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetaFact
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetaFact        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetaFact          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetaFact = fmt.Errorf("proto: unexpected end of group")
)
