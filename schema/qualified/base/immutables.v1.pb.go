// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema/qualified/base/immutables.v1.proto

package base

import (
	fmt "fmt"
	base "github.com/AssetMantle/modules/schema/lists/base"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Immutables struct {
	PropertyList *base.PropertyList `protobuf:"bytes,1,opt,name=property_list,json=propertyList,proto3" json:"property_list,omitempty"`
}

func (m *Immutables) Reset()         { *m = Immutables{} }
func (m *Immutables) String() string { return proto.CompactTextString(m) }
func (*Immutables) ProtoMessage()    {}
func (*Immutables) Descriptor() ([]byte, []int) {
	return fileDescriptor_6397ed7f72bb671a, []int{0}
}
func (m *Immutables) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Immutables) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Immutables.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Immutables) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Immutables.Merge(m, src)
}
func (m *Immutables) XXX_Size() int {
	return m.Size()
}
func (m *Immutables) XXX_DiscardUnknown() {
	xxx_messageInfo_Immutables.DiscardUnknown(m)
}

var xxx_messageInfo_Immutables proto.InternalMessageInfo

func (m *Immutables) GetPropertyList() *base.PropertyList {
	if m != nil {
		return m.PropertyList
	}
	return nil
}

func init() {
	proto.RegisterType((*Immutables)(nil), "qualified.Immutables")
}

func init() {
	proto.RegisterFile("schema/qualified/base/immutables.v1.proto", fileDescriptor_6397ed7f72bb671a)
}

var fileDescriptor_6397ed7f72bb671a = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0x4e, 0xce, 0x48,
	0xcd, 0x4d, 0xd4, 0x2f, 0x2c, 0x4d, 0xcc, 0xc9, 0x4c, 0xcb, 0x4c, 0x4d, 0xd1, 0x4f, 0x4a, 0x2c,
	0x4e, 0xd5, 0xcf, 0xcc, 0xcd, 0x2d, 0x2d, 0x49, 0x4c, 0xca, 0x49, 0x2d, 0xd6, 0x2b, 0x33, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0xab, 0x91, 0x52, 0x87, 0xea, 0xca, 0xc9, 0x2c,
	0x2e, 0x29, 0x86, 0xe8, 0x28, 0x28, 0xca, 0x2f, 0x48, 0x2d, 0x2a, 0xa9, 0xf4, 0xc9, 0x2c, 0x2e,
	0x81, 0xeb, 0x51, 0x72, 0xe3, 0xe2, 0xf2, 0x84, 0x1b, 0x25, 0x64, 0xc1, 0xc5, 0x0b, 0x53, 0x16,
	0x0f, 0xd2, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xac, 0x07, 0x36, 0x47, 0x2f, 0x00,
	0xc9, 0x88, 0x20, 0x1e, 0x64, 0x03, 0x9d, 0xb6, 0x30, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91,
	0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3,
	0xb1, 0x1c, 0x03, 0x17, 0x6f, 0x72, 0x7e, 0xae, 0x1e, 0xdc, 0x69, 0x4e, 0x82, 0x08, 0xfb, 0xc2,
	0x0c, 0x03, 0x40, 0x8e, 0x08, 0x60, 0x8c, 0x32, 0x49, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b,
	0xce, 0xcf, 0xd5, 0x77, 0x2c, 0x2e, 0x4e, 0x2d, 0xf1, 0x4d, 0xcc, 0x2b, 0xc9, 0x49, 0xd5, 0xcf,
	0xcd, 0x4f, 0x29, 0xcd, 0x49, 0x2d, 0xd6, 0xc7, 0x1a, 0x08, 0x8b, 0x98, 0x98, 0x03, 0x23, 0x22,
	0x56, 0x31, 0x71, 0x06, 0xc2, 0x84, 0x4f, 0x21, 0xb1, 0x1f, 0x31, 0x89, 0xc2, 0xd9, 0x31, 0xee,
	0x01, 0x4e, 0xbe, 0xa9, 0x25, 0x89, 0x29, 0x89, 0x25, 0x89, 0xaf, 0x90, 0xd4, 0x24, 0xb1, 0x81,
	0x43, 0xc1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x54, 0xbe, 0xf2, 0x06, 0x66, 0x01, 0x00, 0x00,
}

func (m *Immutables) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Immutables) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Immutables) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PropertyList != nil {
		{
			size, err := m.PropertyList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImmutablesV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImmutablesV1(dAtA []byte, offset int, v uint64) int {
	offset -= sovImmutablesV1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Immutables) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropertyList != nil {
		l = m.PropertyList.Size()
		n += 1 + l + sovImmutablesV1(uint64(l))
	}
	return n
}

func sovImmutablesV1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImmutablesV1(x uint64) (n int) {
	return sovImmutablesV1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Immutables) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImmutablesV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Immutables: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Immutables: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImmutablesV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImmutablesV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImmutablesV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PropertyList == nil {
				m.PropertyList = &base.PropertyList{}
			}
			if err := m.PropertyList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImmutablesV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImmutablesV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImmutablesV1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImmutablesV1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImmutablesV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImmutablesV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImmutablesV1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImmutablesV1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImmutablesV1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImmutablesV1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImmutablesV1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImmutablesV1 = fmt.Errorf("proto: unexpected end of group")
)
