// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema/ids/base/anyOwnableID.proto

package base

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AnyOwnableID struct {
	// Types that are valid to be assigned to Impl:
	//	*AnyOwnableID_AssetID
	//	*AnyOwnableID_CoinID
	Impl isAnyOwnableID_Impl `protobuf_oneof:"impl"`
}

func (m *AnyOwnableID) Reset()         { *m = AnyOwnableID{} }
func (m *AnyOwnableID) String() string { return proto.CompactTextString(m) }
func (*AnyOwnableID) ProtoMessage()    {}
func (*AnyOwnableID) Descriptor() ([]byte, []int) {
	return fileDescriptor_969bec1ec500c2ef, []int{0}
}
func (m *AnyOwnableID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnyOwnableID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnyOwnableID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AnyOwnableID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnyOwnableID.Merge(m, src)
}
func (m *AnyOwnableID) XXX_Size() int {
	return m.Size()
}
func (m *AnyOwnableID) XXX_DiscardUnknown() {
	xxx_messageInfo_AnyOwnableID.DiscardUnknown(m)
}

var xxx_messageInfo_AnyOwnableID proto.InternalMessageInfo

type isAnyOwnableID_Impl interface {
	isAnyOwnableID_Impl()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AnyOwnableID_AssetID struct {
	AssetID *AssetID `protobuf:"bytes,1,opt,name=asset_i_d,json=assetID,proto3,oneof" json:"asset_i_d,omitempty"`
}
type AnyOwnableID_CoinID struct {
	CoinID *CoinID `protobuf:"bytes,2,opt,name=coin_i_d,json=coinID,proto3,oneof" json:"coin_i_d,omitempty"`
}

func (*AnyOwnableID_AssetID) isAnyOwnableID_Impl() {}
func (*AnyOwnableID_CoinID) isAnyOwnableID_Impl()  {}

func (m *AnyOwnableID) GetImpl() isAnyOwnableID_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (m *AnyOwnableID) GetAssetID() *AssetID {
	if x, ok := m.GetImpl().(*AnyOwnableID_AssetID); ok {
		return x.AssetID
	}
	return nil
}

func (m *AnyOwnableID) GetCoinID() *CoinID {
	if x, ok := m.GetImpl().(*AnyOwnableID_CoinID); ok {
		return x.CoinID
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AnyOwnableID) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AnyOwnableID_AssetID)(nil),
		(*AnyOwnableID_CoinID)(nil),
	}
}

func init() {
	proto.RegisterType((*AnyOwnableID)(nil), "ids.AnyOwnableID")
}

func init() {
	proto.RegisterFile("schema/ids/base/anyOwnableID.proto", fileDescriptor_969bec1ec500c2ef)
}

var fileDescriptor_969bec1ec500c2ef = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0x4e, 0xce, 0x48,
	0xcd, 0x4d, 0xd4, 0xcf, 0x4c, 0x29, 0xd6, 0x4f, 0x4a, 0x2c, 0x4e, 0xd5, 0x4f, 0xcc, 0xab, 0xf4,
	0x2f, 0xcf, 0x4b, 0x4c, 0xca, 0x49, 0xf5, 0x74, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0xce, 0x4c, 0x29, 0x96, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0xf3, 0xf5, 0x41, 0x2c, 0x88, 0x94,
	0x94, 0x2c, 0x86, 0xf6, 0xe2, 0xe2, 0xd4, 0x12, 0x98, 0x4e, 0x29, 0x19, 0x74, 0xe9, 0xe4, 0xfc,
	0xcc, 0x3c, 0x98, 0xac, 0x52, 0x21, 0x17, 0x8f, 0x23, 0x92, 0x6d, 0x42, 0x5a, 0x5c, 0x9c, 0x60,
	0xed, 0xf1, 0x99, 0xf1, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x3c, 0x7a, 0x99, 0x29,
	0xc5, 0x7a, 0x8e, 0x10, 0x43, 0x3d, 0x18, 0x82, 0xd8, 0xa1, 0xe6, 0x0b, 0xa9, 0x73, 0x71, 0x80,
	0xcc, 0x02, 0x2b, 0x65, 0x02, 0x2b, 0xe5, 0x06, 0x2b, 0x75, 0x06, 0x5b, 0xe0, 0xc1, 0x10, 0xc4,
	0x06, 0xb1, 0xca, 0x8a, 0xa5, 0x63, 0x81, 0x3c, 0x83, 0x13, 0x1b, 0x17, 0x4b, 0x66, 0x6e, 0x41,
	0x8e, 0xd3, 0x04, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e,
	0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0xe0, 0x62, 0x4f,
	0xce, 0xcf, 0x05, 0x19, 0xe1, 0x24, 0x88, 0xec, 0xa8, 0x00, 0x90, 0x4b, 0x03, 0x18, 0xa3, 0xf4,
	0xd2, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xc1, 0xce, 0xf1, 0x4d, 0xcc,
	0x2b, 0xc9, 0x49, 0xd5, 0xcf, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0x2d, 0xd6, 0x47, 0xf3, 0xe8, 0x22,
	0x26, 0x66, 0xcf, 0x88, 0x88, 0x55, 0x4c, 0xcc, 0x9e, 0x29, 0xc5, 0xa7, 0xc0, 0xe4, 0x23, 0x26,
	0x7e, 0xcf, 0x94, 0xe2, 0x18, 0xf7, 0x00, 0x27, 0xdf, 0xd4, 0x92, 0xc4, 0x94, 0xc4, 0x92, 0xc4,
	0x57, 0x60, 0xf1, 0x24, 0x36, 0x70, 0x60, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x2f,
	0xb3, 0xf2, 0x8a, 0x01, 0x00, 0x00,
}

func (m *AnyOwnableID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnyOwnableID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyOwnableID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Impl != nil {
		{
			size := m.Impl.Size()
			i -= size
			if _, err := m.Impl.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AnyOwnableID_AssetID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyOwnableID_AssetID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AssetID != nil {
		{
			size, err := m.AssetID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyOwnableID(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AnyOwnableID_CoinID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AnyOwnableID_CoinID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CoinID != nil {
		{
			size, err := m.CoinID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAnyOwnableID(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintAnyOwnableID(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnyOwnableID(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AnyOwnableID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Impl != nil {
		n += m.Impl.Size()
	}
	return n
}

func (m *AnyOwnableID_AssetID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetID != nil {
		l = m.AssetID.Size()
		n += 1 + l + sovAnyOwnableID(uint64(l))
	}
	return n
}
func (m *AnyOwnableID_CoinID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinID != nil {
		l = m.CoinID.Size()
		n += 1 + l + sovAnyOwnableID(uint64(l))
	}
	return n
}

func sovAnyOwnableID(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnyOwnableID(x uint64) (n int) {
	return sovAnyOwnableID(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnyOwnableID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnyOwnableID
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnyOwnableID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnyOwnableID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyOwnableID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyOwnableID
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyOwnableID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AssetID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyOwnableID_AssetID{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnyOwnableID
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnyOwnableID
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAnyOwnableID
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CoinID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &AnyOwnableID_CoinID{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnyOwnableID(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnyOwnableID
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnyOwnableID(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnyOwnableID
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnyOwnableID
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnyOwnableID
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnyOwnableID
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnyOwnableID
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnyOwnableID
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnyOwnableID        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnyOwnableID          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnyOwnableID = fmt.Errorf("proto: unexpected end of group")
)
