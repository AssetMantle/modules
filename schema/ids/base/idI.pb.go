// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: schema/ids/base/idI.proto

package base

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IDI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Impl:
	//
	//	*IDI_AssetID
	//	*IDI_ClassificationID
	//	*IDI_DataID
	//	*IDI_HashID
	//	*IDI_IdentityID
	//	*IDI_MaintainerID
	//	*IDI_OrderID
	//	*IDI_OwnableID
	//	*IDI_PropertyID
	//	*IDI_SplitID
	//	*IDI_StringID
	Impl isIDI_Impl `protobuf_oneof:"impl"`
}

func (x *IDI) Reset() {
	*x = IDI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_ids_base_idI_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDI) ProtoMessage() {}

func (x *IDI) ProtoReflect() protoreflect.Message {
	mi := &file_schema_ids_base_idI_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDI.ProtoReflect.Descriptor instead.
func (*IDI) Descriptor() ([]byte, []int) {
	return file_schema_ids_base_idI_proto_rawDescGZIP(), []int{0}
}

func (m *IDI) GetImpl() isIDI_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (x *IDI) GetAssetID() *AssetIDI {
	if x, ok := x.GetImpl().(*IDI_AssetID); ok {
		return x.AssetID
	}
	return nil
}

func (x *IDI) GetClassificationID() *ClassificationIDI {
	if x, ok := x.GetImpl().(*IDI_ClassificationID); ok {
		return x.ClassificationID
	}
	return nil
}

func (x *IDI) GetDataID() *DataIDI {
	if x, ok := x.GetImpl().(*IDI_DataID); ok {
		return x.DataID
	}
	return nil
}

func (x *IDI) GetHashID() *HashIDI {
	if x, ok := x.GetImpl().(*IDI_HashID); ok {
		return x.HashID
	}
	return nil
}

func (x *IDI) GetIdentityID() *IdentityIDI {
	if x, ok := x.GetImpl().(*IDI_IdentityID); ok {
		return x.IdentityID
	}
	return nil
}

func (x *IDI) GetMaintainerID() *MaintainerIDI {
	if x, ok := x.GetImpl().(*IDI_MaintainerID); ok {
		return x.MaintainerID
	}
	return nil
}

func (x *IDI) GetOrderID() *OrderIDI {
	if x, ok := x.GetImpl().(*IDI_OrderID); ok {
		return x.OrderID
	}
	return nil
}

func (x *IDI) GetOwnableID() *OwnableIDI {
	if x, ok := x.GetImpl().(*IDI_OwnableID); ok {
		return x.OwnableID
	}
	return nil
}

func (x *IDI) GetPropertyID() *PropertyIDI {
	if x, ok := x.GetImpl().(*IDI_PropertyID); ok {
		return x.PropertyID
	}
	return nil
}

func (x *IDI) GetSplitID() *SplitIDI {
	if x, ok := x.GetImpl().(*IDI_SplitID); ok {
		return x.SplitID
	}
	return nil
}

func (x *IDI) GetStringID() *StringIDI {
	if x, ok := x.GetImpl().(*IDI_StringID); ok {
		return x.StringID
	}
	return nil
}

type isIDI_Impl interface {
	isIDI_Impl()
}

type IDI_AssetID struct {
	AssetID *AssetIDI `protobuf:"bytes,1,opt,name=AssetID,proto3,oneof"`
}

type IDI_ClassificationID struct {
	ClassificationID *ClassificationIDI `protobuf:"bytes,2,opt,name=ClassificationID,proto3,oneof"`
}

type IDI_DataID struct {
	DataID *DataIDI `protobuf:"bytes,3,opt,name=DataID,proto3,oneof"`
}

type IDI_HashID struct {
	HashID *HashIDI `protobuf:"bytes,4,opt,name=HashID,proto3,oneof"`
}

type IDI_IdentityID struct {
	IdentityID *IdentityIDI `protobuf:"bytes,5,opt,name=IdentityID,proto3,oneof"`
}

type IDI_MaintainerID struct {
	MaintainerID *MaintainerIDI `protobuf:"bytes,6,opt,name=MaintainerID,proto3,oneof"`
}

type IDI_OrderID struct {
	OrderID *OrderIDI `protobuf:"bytes,7,opt,name=OrderID,proto3,oneof"`
}

type IDI_OwnableID struct {
	OwnableID *OwnableIDI `protobuf:"bytes,8,opt,name=OwnableID,proto3,oneof"`
}

type IDI_PropertyID struct {
	PropertyID *PropertyIDI `protobuf:"bytes,9,opt,name=PropertyID,proto3,oneof"`
}

type IDI_SplitID struct {
	SplitID *SplitIDI `protobuf:"bytes,10,opt,name=SplitID,proto3,oneof"`
}

type IDI_StringID struct {
	StringID *StringIDI `protobuf:"bytes,11,opt,name=StringID,proto3,oneof"`
}

func (*IDI_AssetID) isIDI_Impl() {}

func (*IDI_ClassificationID) isIDI_Impl() {}

func (*IDI_DataID) isIDI_Impl() {}

func (*IDI_HashID) isIDI_Impl() {}

func (*IDI_IdentityID) isIDI_Impl() {}

func (*IDI_MaintainerID) isIDI_Impl() {}

func (*IDI_OrderID) isIDI_Impl() {}

func (*IDI_OwnableID) isIDI_Impl() {}

func (*IDI_PropertyID) isIDI_Impl() {}

func (*IDI_SplitID) isIDI_Impl() {}

func (*IDI_StringID) isIDI_Impl() {}

var File_schema_ids_base_idI_proto protoreflect.FileDescriptor

var file_schema_ids_base_idI_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x69, 0x64, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x69, 0x64, 0x73,
	0x1a, 0x1e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2f, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x44, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x49, 0x44,
	0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f,
	0x69, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x44, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x6f, 0x77, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x49, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x44, 0x49, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x49, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x04, 0x0a, 0x03, 0x49, 0x44, 0x49, 0x12, 0x29, 0x0a,
	0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x69, 0x64, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52,
	0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x64, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52, 0x10, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x06, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x69, 0x64, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52, 0x06,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x64, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52, 0x06, 0x48, 0x61, 0x73, 0x68, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x64, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x12, 0x38, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x64, 0x73, 0x2e, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52, 0x0c,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x69, 0x64, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x64, 0x73,
	0x2e, 0x4f, 0x77, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52, 0x09, 0x4f,
	0x77, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69,
	0x64, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x49, 0x48, 0x00,
	0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x69, 0x64, 0x73, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52, 0x07,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x64, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x49, 0x48, 0x00, 0x52, 0x08, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x42, 0x6f, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x64, 0x73, 0x42, 0x08, 0x49, 0x64, 0x49, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x74, 0x6c, 0x65, 0x2f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x69, 0x64, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0xa2, 0x02, 0x03, 0x49, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x49, 0x64, 0x73,
	0xca, 0x02, 0x03, 0x49, 0x64, 0x73, 0xe2, 0x02, 0x0f, 0x49, 0x64, 0x73, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x03, 0x49, 0x64, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schema_ids_base_idI_proto_rawDescOnce sync.Once
	file_schema_ids_base_idI_proto_rawDescData = file_schema_ids_base_idI_proto_rawDesc
)

func file_schema_ids_base_idI_proto_rawDescGZIP() []byte {
	file_schema_ids_base_idI_proto_rawDescOnce.Do(func() {
		file_schema_ids_base_idI_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_ids_base_idI_proto_rawDescData)
	})
	return file_schema_ids_base_idI_proto_rawDescData
}

var file_schema_ids_base_idI_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_schema_ids_base_idI_proto_goTypes = []interface{}{
	(*IDI)(nil),               // 0: ids.IDI
	(*AssetIDI)(nil),          // 1: ids.AssetIDI
	(*ClassificationIDI)(nil), // 2: ids.ClassificationIDI
	(*DataIDI)(nil),           // 3: ids.DataIDI
	(*HashIDI)(nil),           // 4: ids.HashIDI
	(*IdentityIDI)(nil),       // 5: ids.IdentityIDI
	(*MaintainerIDI)(nil),     // 6: ids.MaintainerIDI
	(*OrderIDI)(nil),          // 7: ids.OrderIDI
	(*OwnableIDI)(nil),        // 8: ids.OwnableIDI
	(*PropertyIDI)(nil),       // 9: ids.PropertyIDI
	(*SplitIDI)(nil),          // 10: ids.SplitIDI
	(*StringIDI)(nil),         // 11: ids.StringIDI
}
var file_schema_ids_base_idI_proto_depIdxs = []int32{
	1,  // 0: ids.IDI.AssetID:type_name -> ids.AssetIDI
	2,  // 1: ids.IDI.ClassificationID:type_name -> ids.ClassificationIDI
	3,  // 2: ids.IDI.DataID:type_name -> ids.DataIDI
	4,  // 3: ids.IDI.HashID:type_name -> ids.HashIDI
	5,  // 4: ids.IDI.IdentityID:type_name -> ids.IdentityIDI
	6,  // 5: ids.IDI.MaintainerID:type_name -> ids.MaintainerIDI
	7,  // 6: ids.IDI.OrderID:type_name -> ids.OrderIDI
	8,  // 7: ids.IDI.OwnableID:type_name -> ids.OwnableIDI
	9,  // 8: ids.IDI.PropertyID:type_name -> ids.PropertyIDI
	10, // 9: ids.IDI.SplitID:type_name -> ids.SplitIDI
	11, // 10: ids.IDI.StringID:type_name -> ids.StringIDI
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_schema_ids_base_idI_proto_init() }
func file_schema_ids_base_idI_proto_init() {
	if File_schema_ids_base_idI_proto != nil {
		return
	}
	file_schema_ids_base_assetIDI_proto_init()
	file_schema_ids_base_classificationIDI_proto_init()
	file_schema_ids_base_dataIDI_proto_init()
	file_schema_ids_base_hashIDI_proto_init()
	file_schema_ids_base_identityIDI_proto_init()
	file_schema_ids_base_maintainerIDI_proto_init()
	file_schema_ids_base_orderIDI_proto_init()
	file_schema_ids_base_ownableIDI_proto_init()
	file_schema_ids_base_propertyIDI_proto_init()
	file_schema_ids_base_splitIDI_proto_init()
	file_schema_ids_base_stringIDI_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_schema_ids_base_idI_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_schema_ids_base_idI_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IDI_AssetID)(nil),
		(*IDI_ClassificationID)(nil),
		(*IDI_DataID)(nil),
		(*IDI_HashID)(nil),
		(*IDI_IdentityID)(nil),
		(*IDI_MaintainerID)(nil),
		(*IDI_OrderID)(nil),
		(*IDI_OwnableID)(nil),
		(*IDI_PropertyID)(nil),
		(*IDI_SplitID)(nil),
		(*IDI_StringID)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_ids_base_idI_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_ids_base_idI_proto_goTypes,
		DependencyIndexes: file_schema_ids_base_idI_proto_depIdxs,
		MessageInfos:      file_schema_ids_base_idI_proto_msgTypes,
	}.Build()
	File_schema_ids_base_idI_proto = out.File
	file_schema_ids_base_idI_proto_rawDesc = nil
	file_schema_ids_base_idI_proto_goTypes = nil
	file_schema_ids_base_idI_proto_depIdxs = nil
}
