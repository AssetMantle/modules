// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema/data/base/data.v1.proto

package base

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Data struct {
	// Types that are valid to be assigned to Impl:
	//	*Data_AccAddressData
	//	*Data_BooleanData
	//	*Data_DecData
	//	*Data_HeightData
	//	*Data_IdData
	//	*Data_StringData
	Impl isData_Impl `protobuf_oneof:"impl"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b633eca461e0292, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

type isData_Impl interface {
	isData_Impl()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Data_AccAddressData struct {
	AccAddressData *AccAddressData `protobuf:"bytes,1,opt,name=accAddressData,proto3,oneof" json:"accAddressData,omitempty"`
}
type Data_BooleanData struct {
	BooleanData *BooleanData `protobuf:"bytes,2,opt,name=booleanData,proto3,oneof" json:"booleanData,omitempty"`
}
type Data_DecData struct {
	DecData *DecData `protobuf:"bytes,3,opt,name=decData,proto3,oneof" json:"decData,omitempty"`
}
type Data_HeightData struct {
	HeightData *HeightData `protobuf:"bytes,4,opt,name=heightData,proto3,oneof" json:"heightData,omitempty"`
}
type Data_IdData struct {
	IdData *IDData `protobuf:"bytes,5,opt,name=idData,proto3,oneof" json:"idData,omitempty"`
}
type Data_StringData struct {
	StringData *StringData `protobuf:"bytes,6,opt,name=stringData,proto3,oneof" json:"stringData,omitempty"`
}

func (*Data_AccAddressData) isData_Impl() {}
func (*Data_BooleanData) isData_Impl()    {}
func (*Data_DecData) isData_Impl()        {}
func (*Data_HeightData) isData_Impl()     {}
func (*Data_IdData) isData_Impl()         {}
func (*Data_StringData) isData_Impl()     {}

func (m *Data) GetImpl() isData_Impl {
	if m != nil {
		return m.Impl
	}
	return nil
}

func (m *Data) GetAccAddressData() *AccAddressData {
	if x, ok := m.GetImpl().(*Data_AccAddressData); ok {
		return x.AccAddressData
	}
	return nil
}

func (m *Data) GetBooleanData() *BooleanData {
	if x, ok := m.GetImpl().(*Data_BooleanData); ok {
		return x.BooleanData
	}
	return nil
}

func (m *Data) GetDecData() *DecData {
	if x, ok := m.GetImpl().(*Data_DecData); ok {
		return x.DecData
	}
	return nil
}

func (m *Data) GetHeightData() *HeightData {
	if x, ok := m.GetImpl().(*Data_HeightData); ok {
		return x.HeightData
	}
	return nil
}

func (m *Data) GetIdData() *IDData {
	if x, ok := m.GetImpl().(*Data_IdData); ok {
		return x.IdData
	}
	return nil
}

func (m *Data) GetStringData() *StringData {
	if x, ok := m.GetImpl().(*Data_StringData); ok {
		return x.StringData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Data) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Data_AccAddressData)(nil),
		(*Data_BooleanData)(nil),
		(*Data_DecData)(nil),
		(*Data_HeightData)(nil),
		(*Data_IdData)(nil),
		(*Data_StringData)(nil),
	}
}

func init() {
	proto.RegisterType((*Data)(nil), "data.Data")
}

func init() { proto.RegisterFile("schema/data/base/data.v1.proto", fileDescriptor_8b633eca461e0292) }

var fileDescriptor_8b633eca461e0292 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x31, 0x4b, 0xf3, 0x40,
	0x1c, 0xc6, 0x93, 0x34, 0x6f, 0x5e, 0xb9, 0xaa, 0xd4, 0xe0, 0x10, 0x3a, 0x84, 0x2a, 0x2a, 0x75,
	0x49, 0x68, 0xc5, 0x55, 0x68, 0x08, 0x18, 0x87, 0x42, 0x89, 0x20, 0x45, 0x5c, 0x2e, 0xc9, 0xd1,
	0x04, 0x92, 0x5e, 0xe9, 0x5d, 0xfd, 0x1c, 0xfd, 0x0c, 0x8e, 0x7e, 0x0a, 0x47, 0x71, 0xea, 0xe8,
	0x28, 0xe9, 0xe6, 0xa7, 0x90, 0xbb, 0xab, 0x4d, 0xd2, 0x0c, 0x4e, 0x97, 0xfc, 0x9f, 0xdf, 0xf3,
	0x1c, 0xf7, 0xfc, 0x81, 0x49, 0xc2, 0x18, 0x65, 0xd0, 0x8e, 0x20, 0x85, 0x76, 0x00, 0x09, 0xe2,
	0x5f, 0xd6, 0x73, 0xcf, 0x9a, 0xcd, 0x31, 0xc5, 0xba, 0xca, 0x7e, 0xdb, 0xdd, 0x1a, 0x05, 0xc3,
	0x70, 0x10, 0x45, 0x73, 0x44, 0x88, 0x5b, 0xe6, 0xdb, 0xe7, 0x35, 0x32, 0xc0, 0x38, 0x45, 0x70,
	0x5a, 0xc5, 0x4e, 0xea, 0xd7, 0xa2, 0xb0, 0x8a, 0x9c, 0xd5, 0x90, 0x18, 0x25, 0x93, 0x98, 0x56,
	0xa9, 0x4e, 0x8d, 0x4a, 0xa2, 0xbf, 0x72, 0x08, 0x9d, 0x27, 0xd3, 0x49, 0x85, 0x3a, 0x7d, 0x53,
	0x80, 0xca, 0x26, 0xfa, 0x0d, 0x38, 0xac, 0xbe, 0xcd, 0x90, 0x3b, 0x72, 0xb7, 0xd9, 0x3f, 0xb6,
	0x78, 0x31, 0x83, 0x8a, 0xe6, 0x49, 0xfe, 0x0e, 0xad, 0x5f, 0x83, 0x66, 0xe9, 0xc5, 0x86, 0xc2,
	0xcd, 0x47, 0xc2, 0xec, 0x14, 0x82, 0x27, 0xf9, 0x65, 0x4e, 0xbf, 0x04, 0xff, 0x37, 0x0d, 0x18,
	0x0d, 0x6e, 0x39, 0x10, 0x16, 0x57, 0x0c, 0x3d, 0xc9, 0xff, 0xd5, 0xf5, 0x3e, 0x00, 0x45, 0x13,
	0x86, 0xca, 0xe9, 0x96, 0xa0, 0xbd, 0xed, 0xdc, 0x93, 0xfc, 0x12, 0xa5, 0x5f, 0x00, 0x4d, 0xf4,
	0x62, 0xfc, 0xe3, 0xfc, 0xbe, 0xe0, 0xef, 0xdc, 0x0d, 0xbb, 0x51, 0x59, 0x76, 0xd1, 0x8e, 0xa1,
	0x95, 0xb3, 0xef, 0xb7, 0x73, 0x96, 0x5d, 0x50, 0x8e, 0x06, 0xd4, 0x24, 0x9b, 0xa5, 0xce, 0x52,
	0x7e, 0xcf, 0x4d, 0x79, 0x95, 0x9b, 0xf2, 0x57, 0x6e, 0xca, 0xcb, 0xb5, 0x29, 0xad, 0xd6, 0xa6,
	0xf4, 0xb9, 0x36, 0x25, 0xb0, 0x17, 0xe2, 0x8c, 0xa7, 0x38, 0x4d, 0x66, 0x79, 0xe8, 0x8d, 0x58,
	0xe9, 0x23, 0xf9, 0xd1, 0x9e, 0x24, 0x34, 0x5e, 0x04, 0x56, 0x88, 0x33, 0x7b, 0x40, 0x08, 0xa2,
	0x43, 0x38, 0xa5, 0x29, 0xb2, 0x33, 0x1c, 0x2d, 0x52, 0x44, 0xec, 0xdd, 0xdd, 0xbd, 0x28, 0x0d,
	0x77, 0x3c, 0x7e, 0x55, 0xf8, 0xae, 0x3e, 0xc4, 0x91, 0x2b, 0x2d, 0x76, 0x3c, 0xdd, 0x8e, 0x9c,
	0x21, 0xa2, 0x90, 0xb1, 0xdf, 0x42, 0x09, 0x34, 0xbe, 0xdc, 0xab, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x70, 0x8d, 0xf0, 0x26, 0xe6, 0x02, 0x00, 0x00,
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Impl != nil {
		{
			size := m.Impl.Size()
			i -= size
			if _, err := m.Impl.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Data_AccAddressData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_AccAddressData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AccAddressData != nil {
		{
			size, err := m.AccAddressData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Data_BooleanData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_BooleanData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BooleanData != nil {
		{
			size, err := m.BooleanData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Data_DecData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_DecData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DecData != nil {
		{
			size, err := m.DecData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Data_HeightData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_HeightData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HeightData != nil {
		{
			size, err := m.HeightData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Data_IdData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_IdData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IdData != nil {
		{
			size, err := m.IdData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Data_StringData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_StringData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StringData != nil {
		{
			size, err := m.StringData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDataV1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func encodeVarintDataV1(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataV1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Impl != nil {
		n += m.Impl.Size()
	}
	return n
}

func (m *Data_AccAddressData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccAddressData != nil {
		l = m.AccAddressData.Size()
		n += 1 + l + sovDataV1(uint64(l))
	}
	return n
}
func (m *Data_BooleanData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BooleanData != nil {
		l = m.BooleanData.Size()
		n += 1 + l + sovDataV1(uint64(l))
	}
	return n
}
func (m *Data_DecData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DecData != nil {
		l = m.DecData.Size()
		n += 1 + l + sovDataV1(uint64(l))
	}
	return n
}
func (m *Data_HeightData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeightData != nil {
		l = m.HeightData.Size()
		n += 1 + l + sovDataV1(uint64(l))
	}
	return n
}
func (m *Data_IdData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdData != nil {
		l = m.IdData.Size()
		n += 1 + l + sovDataV1(uint64(l))
	}
	return n
}
func (m *Data_StringData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StringData != nil {
		l = m.StringData.Size()
		n += 1 + l + sovDataV1(uint64(l))
	}
	return n
}

func sovDataV1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataV1(x uint64) (n int) {
	return sovDataV1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddressData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccAddressData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &Data_AccAddressData{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BooleanData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BooleanData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &Data_BooleanData{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &Data_DecData{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HeightData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &Data_HeightData{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IDData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &Data_IdData{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataV1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataV1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StringData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Impl = &Data_StringData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataV1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataV1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataV1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataV1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataV1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataV1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataV1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataV1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataV1 = fmt.Errorf("proto: unexpected end of group")
)
